Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACK
    DECADE
    INT64
    NOTSO
    SEMI

Grammar

Rule 0     S' -> statement
Rule 1     statement -> statement NEWLINE statement
Rule 2     statement -> statement NEWLINE statement NEWLINE
Rule 3     statement -> exassign
Rule 4     statement -> declare
Rule 5     statement -> exprint
Rule 6     statement -> exif
Rule 7     statement -> exelif
Rule 8     statement -> exloop
Rule 9     statement -> exrepeat
Rule 10    statement -> statement NEWLINE
Rule 11    statement -> NEWLINE statement
Rule 12    statement -> exloop NEWLINE
Rule 13    exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE
Rule 14    exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
Rule 15    exelif -> exif exelse
Rule 16    exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE
Rule 17    exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE
Rule 18    exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE
Rule 19    exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
Rule 20    exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
Rule 21    exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
Rule 22    expression -> expression PLUS expression
Rule 23    expression -> term PLUS term
Rule 24    expression -> term PLUS expression
Rule 25    expression -> expression MINUS expression
Rule 26    expression -> term MINUS term
Rule 27    expression -> term MINUS expression
Rule 28    expression -> expression MUL expression
Rule 29    expression -> term MUL term
Rule 30    expression -> term MUL expression
Rule 31    expression -> expression DIV expression
Rule 32    expression -> term DIV term
Rule 33    expression -> term DIV expression
Rule 34    expression -> expression MOD expression
Rule 35    expression -> term MOD term
Rule 36    expression -> term MOD expression
Rule 37    term -> WORD
Rule 38    term -> arraysh
Rule 39    term -> NUM
Rule 40    term -> HEX
Rule 41    typeconst -> TYPE_H
Rule 42    typeconst -> TYPE_N
Rule 43    typeconst -> TYPE_A
Rule 44    typeconst -> TYPE_S
Rule 45    expression -> term
Rule 46    expression -> MINUS expression
Rule 47    expression -> LPAREN expression RPAREN
Rule 48    exassign -> WORD EQU expression
Rule 49    exassign -> arraysh EQU expression
Rule 50    expression -> expression EQUTO expression
Rule 51    expression -> expression NOEQU expression
Rule 52    expression -> expression LESS expression
Rule 53    expression -> expression MORE expression
Rule 54    declare -> DECL typeconst WORD
Rule 55    declare -> DECL typeconst WORD EQU term
Rule 56    arraysh -> WORD LARRY NUM RARRY
Rule 57    arraysh -> WORD LARRY WORD RARRY
Rule 58    declare -> DECL WORD EQU LSTATE arrayX RSTATE
Rule 59    declare -> DECL WORD LARRY NUM RARRY
Rule 60    declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
Rule 61    arrayX -> NUM arrayY
Rule 62    arrayY -> COMMA NUM arrayY
Rule 63    arrayY -> empty empty empty
Rule 64    exprint -> TEXT LPAREN WORD printMore RPAREN
Rule 65    printMore -> , expression printMore
Rule 66    printMore -> empty empty empty
Rule 67    empty -> <empty>

Terminals, with rules where they appear

,                    : 65
BACK                 : 
COMMA                : 62
DECADE               : 
DECL                 : 54 55 58 59 60
DIV                  : 31 32 33
EQU                  : 48 49 55 58 60
EQUTO                : 50
HEX                  : 40
INT64                : 
LARRY                : 56 57 59 60
LESS                 : 52
LOOP                 : 18 19
LPAREN               : 13 14 18 19 20 21 47 64
LSTATE               : 13 14 16 16 17 18 19 20 21 58 60
MINUS                : 25 26 27 46
MOD                  : 34 35 36
MORE                 : 53
MUL                  : 28 29 30
NEWLINE              : 1 2 2 10 11 12 14 17 19 21
NOEQU                : 51
NOTSO                : 
NUM                  : 39 56 59 60 61 62
OTHERWISE            : 16 16 17
PLUS                 : 22 23 24
RARRY                : 56 57 59 60
REPEAT               : 20 21
RPAREN               : 13 14 18 19 20 21 47 64
RSTATE               : 13 14 17 18 19 20 21 58 60
SEMI                 : 
SO                   : 13 14
TEXT                 : 64
TYPE_A               : 43
TYPE_H               : 41
TYPE_N               : 42
TYPE_S               : 44
WORD                 : 37 48 54 55 56 57 57 58 59 60 64
error                : 

Nonterminals, with rules where they appear

arrayX               : 58 60
arrayY               : 61 62
arraysh              : 38 49
declare              : 4
empty                : 63 63 63 66 66 66
exassign             : 3
exelif               : 7
exelse               : 15
exif                 : 6 15
exloop               : 8 12
expression           : 13 14 18 19 20 21 22 22 24 25 25 27 28 28 30 31 31 33 34 34 36 46 47 48 49 50 50 51 51 52 52 53 53 65
exprint              : 5
exrepeat             : 9
printMore            : 64 65
statement            : 1 1 2 2 10 11 13 14 16 17 18 19 20 21 0
term                 : 23 23 24 26 26 27 29 29 30 32 32 33 35 35 36 45 55
typeconst            : 54 55

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 1
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 1

    (0) S' -> statement .
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    NEWLINE         shift and go to state 17


state 2

    (11) statement -> NEWLINE . statement
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 18
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 3

    (3) statement -> exassign .

    NEWLINE         reduce using rule 3 (statement -> exassign .)
    $end            reduce using rule 3 (statement -> exassign .)
    LSTATE          reduce using rule 3 (statement -> exassign .)
    RSTATE          reduce using rule 3 (statement -> exassign .)


state 4

    (4) statement -> declare .

    NEWLINE         reduce using rule 4 (statement -> declare .)
    $end            reduce using rule 4 (statement -> declare .)
    LSTATE          reduce using rule 4 (statement -> declare .)
    RSTATE          reduce using rule 4 (statement -> declare .)


state 5

    (5) statement -> exprint .

    NEWLINE         reduce using rule 5 (statement -> exprint .)
    $end            reduce using rule 5 (statement -> exprint .)
    LSTATE          reduce using rule 5 (statement -> exprint .)
    RSTATE          reduce using rule 5 (statement -> exprint .)


state 6

    (6) statement -> exif .
    (15) exelif -> exif . exelse
    (16) exelse -> . OTHERWISE LSTATE statement LSTATE OTHERWISE
    (17) exelse -> . OTHERWISE LSTATE NEWLINE statement RSTATE

    NEWLINE         reduce using rule 6 (statement -> exif .)
    $end            reduce using rule 6 (statement -> exif .)
    LSTATE          reduce using rule 6 (statement -> exif .)
    RSTATE          reduce using rule 6 (statement -> exif .)
    OTHERWISE       shift and go to state 20

    exelse                         shift and go to state 19

state 7

    (7) statement -> exelif .

    NEWLINE         reduce using rule 7 (statement -> exelif .)
    $end            reduce using rule 7 (statement -> exelif .)
    LSTATE          reduce using rule 7 (statement -> exelif .)
    RSTATE          reduce using rule 7 (statement -> exelif .)


state 8

    (8) statement -> exloop .
    (12) statement -> exloop . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 8 (statement -> exloop .)
    LSTATE          reduce using rule 8 (statement -> exloop .)
    RSTATE          reduce using rule 8 (statement -> exloop .)
    NEWLINE         shift and go to state 21

  ! NEWLINE         [ reduce using rule 8 (statement -> exloop .) ]


state 9

    (9) statement -> exrepeat .

    NEWLINE         reduce using rule 9 (statement -> exrepeat .)
    $end            reduce using rule 9 (statement -> exrepeat .)
    LSTATE          reduce using rule 9 (statement -> exrepeat .)
    RSTATE          reduce using rule 9 (statement -> exrepeat .)


state 10

    (48) exassign -> WORD . EQU expression
    (56) arraysh -> WORD . LARRY NUM RARRY
    (57) arraysh -> WORD . LARRY WORD RARRY

    EQU             shift and go to state 22
    LARRY           shift and go to state 23


state 11

    (49) exassign -> arraysh . EQU expression

    EQU             shift and go to state 24


state 12

    (54) declare -> DECL . typeconst WORD
    (55) declare -> DECL . typeconst WORD EQU term
    (58) declare -> DECL . WORD EQU LSTATE arrayX RSTATE
    (59) declare -> DECL . WORD LARRY NUM RARRY
    (60) declare -> DECL . WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (41) typeconst -> . TYPE_H
    (42) typeconst -> . TYPE_N
    (43) typeconst -> . TYPE_A
    (44) typeconst -> . TYPE_S

    WORD            shift and go to state 26
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_A          shift and go to state 29
    TYPE_S          shift and go to state 30

    typeconst                      shift and go to state 25

state 13

    (64) exprint -> TEXT . LPAREN WORD printMore RPAREN

    LPAREN          shift and go to state 31


state 14

    (13) exif -> SO . LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> SO . LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE

    LPAREN          shift and go to state 32


state 15

    (18) exloop -> LOOP . LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> LOOP . LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE

    LPAREN          shift and go to state 33


state 16

    (20) exrepeat -> REPEAT . LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> REPEAT . LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE

    LPAREN          shift and go to state 34


state 17

    (1) statement -> statement NEWLINE . statement
    (2) statement -> statement NEWLINE . statement NEWLINE
    (10) statement -> statement NEWLINE .
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 10 (statement -> statement NEWLINE .)
    LSTATE          reduce using rule 10 (statement -> statement NEWLINE .)
    RSTATE          reduce using rule 10 (statement -> statement NEWLINE .)
    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

  ! NEWLINE         [ reduce using rule 10 (statement -> statement NEWLINE .) ]

    statement                      shift and go to state 35
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 18

    (11) statement -> NEWLINE statement .
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 11 (statement -> NEWLINE statement .)
    LSTATE          reduce using rule 11 (statement -> NEWLINE statement .)
    RSTATE          reduce using rule 11 (statement -> NEWLINE statement .)
    NEWLINE         shift and go to state 17

  ! NEWLINE         [ reduce using rule 11 (statement -> NEWLINE statement .) ]


state 19

    (15) exelif -> exif exelse .

    NEWLINE         reduce using rule 15 (exelif -> exif exelse .)
    $end            reduce using rule 15 (exelif -> exif exelse .)
    LSTATE          reduce using rule 15 (exelif -> exif exelse .)
    RSTATE          reduce using rule 15 (exelif -> exif exelse .)


state 20

    (16) exelse -> OTHERWISE . LSTATE statement LSTATE OTHERWISE
    (17) exelse -> OTHERWISE . LSTATE NEWLINE statement RSTATE

    LSTATE          shift and go to state 36


state 21

    (12) statement -> exloop NEWLINE .

    NEWLINE         reduce using rule 12 (statement -> exloop NEWLINE .)
    $end            reduce using rule 12 (statement -> exloop NEWLINE .)
    LSTATE          reduce using rule 12 (statement -> exloop NEWLINE .)
    RSTATE          reduce using rule 12 (statement -> exloop NEWLINE .)


state 22

    (48) exassign -> WORD EQU . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 38
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 23

    (56) arraysh -> WORD LARRY . NUM RARRY
    (57) arraysh -> WORD LARRY . WORD RARRY

    NUM             shift and go to state 46
    WORD            shift and go to state 45


state 24

    (49) exassign -> arraysh EQU . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    arraysh                        shift and go to state 42
    expression                     shift and go to state 47
    term                           shift and go to state 39

state 25

    (54) declare -> DECL typeconst . WORD
    (55) declare -> DECL typeconst . WORD EQU term

    WORD            shift and go to state 48


state 26

    (58) declare -> DECL WORD . EQU LSTATE arrayX RSTATE
    (59) declare -> DECL WORD . LARRY NUM RARRY
    (60) declare -> DECL WORD . LARRY NUM RARRY EQU LSTATE arrayX RSTATE

    EQU             shift and go to state 49
    LARRY           shift and go to state 50


state 27

    (41) typeconst -> TYPE_H .

    WORD            reduce using rule 41 (typeconst -> TYPE_H .)


state 28

    (42) typeconst -> TYPE_N .

    WORD            reduce using rule 42 (typeconst -> TYPE_N .)


state 29

    (43) typeconst -> TYPE_A .

    WORD            reduce using rule 43 (typeconst -> TYPE_A .)


state 30

    (44) typeconst -> TYPE_S .

    WORD            reduce using rule 44 (typeconst -> TYPE_S .)


state 31

    (64) exprint -> TEXT LPAREN . WORD printMore RPAREN

    WORD            shift and go to state 51


state 32

    (13) exif -> SO LPAREN . expression RPAREN LSTATE statement RSTATE
    (14) exif -> SO LPAREN . expression RPAREN NEWLINE LSTATE statement RSTATE
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 52
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 33

    (18) exloop -> LOOP LPAREN . expression RPAREN LSTATE statement RSTATE
    (19) exloop -> LOOP LPAREN . expression RPAREN LSTATE NEWLINE statement RSTATE
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 53
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 34

    (20) exrepeat -> REPEAT LPAREN . expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> REPEAT LPAREN . expression RPAREN NEWLINE LSTATE statement RSTATE
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 54
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 35

    (1) statement -> statement NEWLINE statement .
    (2) statement -> statement NEWLINE statement . NEWLINE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 1 (statement -> statement NEWLINE statement .)
    LSTATE          reduce using rule 1 (statement -> statement NEWLINE statement .)
    RSTATE          reduce using rule 1 (statement -> statement NEWLINE statement .)
    NEWLINE         shift and go to state 55

  ! NEWLINE         [ reduce using rule 1 (statement -> statement NEWLINE statement .) ]


state 36

    (16) exelse -> OTHERWISE LSTATE . statement LSTATE OTHERWISE
    (17) exelse -> OTHERWISE LSTATE . NEWLINE statement RSTATE
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 57
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 56
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 37

    (37) term -> WORD .
    (56) arraysh -> WORD . LARRY NUM RARRY
    (57) arraysh -> WORD . LARRY WORD RARRY

    PLUS            reduce using rule 37 (term -> WORD .)
    MINUS           reduce using rule 37 (term -> WORD .)
    MUL             reduce using rule 37 (term -> WORD .)
    DIV             reduce using rule 37 (term -> WORD .)
    MOD             reduce using rule 37 (term -> WORD .)
    EQUTO           reduce using rule 37 (term -> WORD .)
    NOEQU           reduce using rule 37 (term -> WORD .)
    LESS            reduce using rule 37 (term -> WORD .)
    MORE            reduce using rule 37 (term -> WORD .)
    NEWLINE         reduce using rule 37 (term -> WORD .)
    $end            reduce using rule 37 (term -> WORD .)
    LSTATE          reduce using rule 37 (term -> WORD .)
    RSTATE          reduce using rule 37 (term -> WORD .)
    RPAREN          reduce using rule 37 (term -> WORD .)
    ,               reduce using rule 37 (term -> WORD .)
    LARRY           shift and go to state 23


state 38

    (48) exassign -> WORD EQU expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    NEWLINE         reduce using rule 48 (exassign -> WORD EQU expression .)
    $end            reduce using rule 48 (exassign -> WORD EQU expression .)
    LSTATE          reduce using rule 48 (exassign -> WORD EQU expression .)
    RSTATE          reduce using rule 48 (exassign -> WORD EQU expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66


state 39

    (23) expression -> term . PLUS term
    (24) expression -> term . PLUS expression
    (26) expression -> term . MINUS term
    (27) expression -> term . MINUS expression
    (29) expression -> term . MUL term
    (30) expression -> term . MUL expression
    (32) expression -> term . DIV term
    (33) expression -> term . DIV expression
    (35) expression -> term . MOD term
    (36) expression -> term . MOD expression
    (45) expression -> term .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71
    EQUTO           reduce using rule 45 (expression -> term .)
    NOEQU           reduce using rule 45 (expression -> term .)
    LESS            reduce using rule 45 (expression -> term .)
    MORE            reduce using rule 45 (expression -> term .)
    NEWLINE         reduce using rule 45 (expression -> term .)
    $end            reduce using rule 45 (expression -> term .)
    LSTATE          reduce using rule 45 (expression -> term .)
    RSTATE          reduce using rule 45 (expression -> term .)
    RPAREN          reduce using rule 45 (expression -> term .)
    ,               reduce using rule 45 (expression -> term .)

  ! PLUS            [ reduce using rule 45 (expression -> term .) ]
  ! MINUS           [ reduce using rule 45 (expression -> term .) ]
  ! MUL             [ reduce using rule 45 (expression -> term .) ]
  ! DIV             [ reduce using rule 45 (expression -> term .) ]
  ! MOD             [ reduce using rule 45 (expression -> term .) ]


state 40

    (46) expression -> MINUS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 72
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 41

    (47) expression -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 73
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 42

    (38) term -> arraysh .

    PLUS            reduce using rule 38 (term -> arraysh .)
    MINUS           reduce using rule 38 (term -> arraysh .)
    MUL             reduce using rule 38 (term -> arraysh .)
    DIV             reduce using rule 38 (term -> arraysh .)
    MOD             reduce using rule 38 (term -> arraysh .)
    EQUTO           reduce using rule 38 (term -> arraysh .)
    NOEQU           reduce using rule 38 (term -> arraysh .)
    LESS            reduce using rule 38 (term -> arraysh .)
    MORE            reduce using rule 38 (term -> arraysh .)
    NEWLINE         reduce using rule 38 (term -> arraysh .)
    $end            reduce using rule 38 (term -> arraysh .)
    LSTATE          reduce using rule 38 (term -> arraysh .)
    RSTATE          reduce using rule 38 (term -> arraysh .)
    RPAREN          reduce using rule 38 (term -> arraysh .)
    ,               reduce using rule 38 (term -> arraysh .)


state 43

    (39) term -> NUM .

    PLUS            reduce using rule 39 (term -> NUM .)
    MINUS           reduce using rule 39 (term -> NUM .)
    MUL             reduce using rule 39 (term -> NUM .)
    DIV             reduce using rule 39 (term -> NUM .)
    MOD             reduce using rule 39 (term -> NUM .)
    EQUTO           reduce using rule 39 (term -> NUM .)
    NOEQU           reduce using rule 39 (term -> NUM .)
    LESS            reduce using rule 39 (term -> NUM .)
    MORE            reduce using rule 39 (term -> NUM .)
    NEWLINE         reduce using rule 39 (term -> NUM .)
    $end            reduce using rule 39 (term -> NUM .)
    LSTATE          reduce using rule 39 (term -> NUM .)
    RSTATE          reduce using rule 39 (term -> NUM .)
    RPAREN          reduce using rule 39 (term -> NUM .)
    ,               reduce using rule 39 (term -> NUM .)


state 44

    (40) term -> HEX .

    PLUS            reduce using rule 40 (term -> HEX .)
    MINUS           reduce using rule 40 (term -> HEX .)
    MUL             reduce using rule 40 (term -> HEX .)
    DIV             reduce using rule 40 (term -> HEX .)
    MOD             reduce using rule 40 (term -> HEX .)
    EQUTO           reduce using rule 40 (term -> HEX .)
    NOEQU           reduce using rule 40 (term -> HEX .)
    LESS            reduce using rule 40 (term -> HEX .)
    MORE            reduce using rule 40 (term -> HEX .)
    NEWLINE         reduce using rule 40 (term -> HEX .)
    $end            reduce using rule 40 (term -> HEX .)
    LSTATE          reduce using rule 40 (term -> HEX .)
    RSTATE          reduce using rule 40 (term -> HEX .)
    RPAREN          reduce using rule 40 (term -> HEX .)
    ,               reduce using rule 40 (term -> HEX .)


state 45

    (57) arraysh -> WORD LARRY WORD . RARRY

    RARRY           shift and go to state 74


state 46

    (56) arraysh -> WORD LARRY NUM . RARRY

    RARRY           shift and go to state 75


state 47

    (49) exassign -> arraysh EQU expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    NEWLINE         reduce using rule 49 (exassign -> arraysh EQU expression .)
    $end            reduce using rule 49 (exassign -> arraysh EQU expression .)
    LSTATE          reduce using rule 49 (exassign -> arraysh EQU expression .)
    RSTATE          reduce using rule 49 (exassign -> arraysh EQU expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66


state 48

    (54) declare -> DECL typeconst WORD .
    (55) declare -> DECL typeconst WORD . EQU term

    NEWLINE         reduce using rule 54 (declare -> DECL typeconst WORD .)
    $end            reduce using rule 54 (declare -> DECL typeconst WORD .)
    LSTATE          reduce using rule 54 (declare -> DECL typeconst WORD .)
    RSTATE          reduce using rule 54 (declare -> DECL typeconst WORD .)
    EQU             shift and go to state 76


state 49

    (58) declare -> DECL WORD EQU . LSTATE arrayX RSTATE

    LSTATE          shift and go to state 77


state 50

    (59) declare -> DECL WORD LARRY . NUM RARRY
    (60) declare -> DECL WORD LARRY . NUM RARRY EQU LSTATE arrayX RSTATE

    NUM             shift and go to state 78


state 51

    (64) exprint -> TEXT LPAREN WORD . printMore RPAREN
    (65) printMore -> . , expression printMore
    (66) printMore -> . empty empty empty
    (67) empty -> .

    ,               shift and go to state 80
    RPAREN          reduce using rule 67 (empty -> .)

    printMore                      shift and go to state 79
    empty                          shift and go to state 81

state 52

    (13) exif -> SO LPAREN expression . RPAREN LSTATE statement RSTATE
    (14) exif -> SO LPAREN expression . RPAREN NEWLINE LSTATE statement RSTATE
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66


state 53

    (18) exloop -> LOOP LPAREN expression . RPAREN LSTATE statement RSTATE
    (19) exloop -> LOOP LPAREN expression . RPAREN LSTATE NEWLINE statement RSTATE
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66


state 54

    (20) exrepeat -> REPEAT LPAREN expression . RPAREN LSTATE statement RSTATE
    (21) exrepeat -> REPEAT LPAREN expression . RPAREN NEWLINE LSTATE statement RSTATE
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66


state 55

    (2) statement -> statement NEWLINE statement NEWLINE .
    (1) statement -> statement NEWLINE . statement
    (2) statement -> statement NEWLINE . statement NEWLINE
    (10) statement -> statement NEWLINE .
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

  ! reduce/reduce conflict for NEWLINE resolved using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for $end resolved using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for LSTATE resolved using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for RSTATE resolved using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
    LSTATE          reduce using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
    RSTATE          reduce using rule 2 (statement -> statement NEWLINE statement NEWLINE .)
    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

  ! NEWLINE         [ reduce using rule 2 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! NEWLINE         [ reduce using rule 10 (statement -> statement NEWLINE .) ]
  ! $end            [ reduce using rule 10 (statement -> statement NEWLINE .) ]
  ! LSTATE          [ reduce using rule 10 (statement -> statement NEWLINE .) ]
  ! RSTATE          [ reduce using rule 10 (statement -> statement NEWLINE .) ]

    statement                      shift and go to state 35
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 56

    (16) exelse -> OTHERWISE LSTATE statement . LSTATE OTHERWISE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    LSTATE          shift and go to state 85
    NEWLINE         shift and go to state 17


state 57

    (17) exelse -> OTHERWISE LSTATE NEWLINE . statement RSTATE
    (11) statement -> NEWLINE . statement
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 86
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 58

    (22) expression -> expression PLUS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 87
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 59

    (25) expression -> expression MINUS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 88
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 60

    (28) expression -> expression MUL . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 89
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 61

    (31) expression -> expression DIV . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 90
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 62

    (34) expression -> expression MOD . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 91
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 63

    (50) expression -> expression EQUTO . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 92
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 64

    (51) expression -> expression NOEQU . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 93
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 65

    (52) expression -> expression LESS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 94
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 66

    (53) expression -> expression MORE . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 95
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 67

    (23) expression -> term PLUS . term
    (24) expression -> term PLUS . expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44
    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41

    term                           shift and go to state 96
    expression                     shift and go to state 97
    arraysh                        shift and go to state 42

state 68

    (26) expression -> term MINUS . term
    (27) expression -> term MINUS . expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44
    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41

    term                           shift and go to state 98
    expression                     shift and go to state 99
    arraysh                        shift and go to state 42

state 69

    (29) expression -> term MUL . term
    (30) expression -> term MUL . expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44
    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41

    term                           shift and go to state 100
    expression                     shift and go to state 101
    arraysh                        shift and go to state 42

state 70

    (32) expression -> term DIV . term
    (33) expression -> term DIV . expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44
    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41

    term                           shift and go to state 102
    expression                     shift and go to state 103
    arraysh                        shift and go to state 42

state 71

    (35) expression -> term MOD . term
    (36) expression -> term MOD . expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44
    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41

    term                           shift and go to state 104
    expression                     shift and go to state 105
    arraysh                        shift and go to state 42

state 72

    (46) expression -> MINUS expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 46 (expression -> MINUS expression .)
    MINUS           reduce using rule 46 (expression -> MINUS expression .)
    EQUTO           reduce using rule 46 (expression -> MINUS expression .)
    NOEQU           reduce using rule 46 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 46 (expression -> MINUS expression .)
    $end            reduce using rule 46 (expression -> MINUS expression .)
    LSTATE          reduce using rule 46 (expression -> MINUS expression .)
    RSTATE          reduce using rule 46 (expression -> MINUS expression .)
    RPAREN          reduce using rule 46 (expression -> MINUS expression .)
    ,               reduce using rule 46 (expression -> MINUS expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! MUL             [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! MORE            [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 73

    (47) expression -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    RPAREN          shift and go to state 106
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66


state 74

    (57) arraysh -> WORD LARRY WORD RARRY .

    EQU             reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    PLUS            reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    MINUS           reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    MUL             reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    DIV             reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    MOD             reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    EQUTO           reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    NOEQU           reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    LESS            reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    MORE            reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    NEWLINE         reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    $end            reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    LSTATE          reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    RSTATE          reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    RPAREN          reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)
    ,               reduce using rule 57 (arraysh -> WORD LARRY WORD RARRY .)


state 75

    (56) arraysh -> WORD LARRY NUM RARRY .

    EQU             reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    PLUS            reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    MINUS           reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    MUL             reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    DIV             reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    MOD             reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    EQUTO           reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    NOEQU           reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    LESS            reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    MORE            reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    NEWLINE         reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    $end            reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    LSTATE          reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    RSTATE          reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    RPAREN          reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)
    ,               reduce using rule 56 (arraysh -> WORD LARRY NUM RARRY .)


state 76

    (55) declare -> DECL typeconst WORD EQU . term
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    term                           shift and go to state 107
    arraysh                        shift and go to state 42

state 77

    (58) declare -> DECL WORD EQU LSTATE . arrayX RSTATE
    (61) arrayX -> . NUM arrayY

    NUM             shift and go to state 109

    arrayX                         shift and go to state 108

state 78

    (59) declare -> DECL WORD LARRY NUM . RARRY
    (60) declare -> DECL WORD LARRY NUM . RARRY EQU LSTATE arrayX RSTATE

    RARRY           shift and go to state 110


state 79

    (64) exprint -> TEXT LPAREN WORD printMore . RPAREN

    RPAREN          shift and go to state 111


state 80

    (65) printMore -> , . expression printMore
    (22) expression -> . expression PLUS expression
    (23) expression -> . term PLUS term
    (24) expression -> . term PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . term MINUS term
    (27) expression -> . term MINUS expression
    (28) expression -> . expression MUL expression
    (29) expression -> . term MUL term
    (30) expression -> . term MUL expression
    (31) expression -> . expression DIV expression
    (32) expression -> . term DIV term
    (33) expression -> . term DIV expression
    (34) expression -> . expression MOD expression
    (35) expression -> . term MOD term
    (36) expression -> . term MOD expression
    (45) expression -> . term
    (46) expression -> . MINUS expression
    (47) expression -> . LPAREN expression RPAREN
    (50) expression -> . expression EQUTO expression
    (51) expression -> . expression NOEQU expression
    (52) expression -> . expression LESS expression
    (53) expression -> . expression MORE expression
    (37) term -> . WORD
    (38) term -> . arraysh
    (39) term -> . NUM
    (40) term -> . HEX
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 40
    LPAREN          shift and go to state 41
    WORD            shift and go to state 37
    NUM             shift and go to state 43
    HEX             shift and go to state 44

    expression                     shift and go to state 112
    term                           shift and go to state 39
    arraysh                        shift and go to state 42

state 81

    (66) printMore -> empty . empty empty
    (67) empty -> .

    RPAREN          reduce using rule 67 (empty -> .)

    empty                          shift and go to state 113

state 82

    (13) exif -> SO LPAREN expression RPAREN . LSTATE statement RSTATE
    (14) exif -> SO LPAREN expression RPAREN . NEWLINE LSTATE statement RSTATE

    LSTATE          shift and go to state 114
    NEWLINE         shift and go to state 115


state 83

    (18) exloop -> LOOP LPAREN expression RPAREN . LSTATE statement RSTATE
    (19) exloop -> LOOP LPAREN expression RPAREN . LSTATE NEWLINE statement RSTATE

    LSTATE          shift and go to state 116


state 84

    (20) exrepeat -> REPEAT LPAREN expression RPAREN . LSTATE statement RSTATE
    (21) exrepeat -> REPEAT LPAREN expression RPAREN . NEWLINE LSTATE statement RSTATE

    LSTATE          shift and go to state 117
    NEWLINE         shift and go to state 118


state 85

    (16) exelse -> OTHERWISE LSTATE statement LSTATE . OTHERWISE

    OTHERWISE       shift and go to state 119


state 86

    (17) exelse -> OTHERWISE LSTATE NEWLINE statement . RSTATE
    (11) statement -> NEWLINE statement .
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    RSTATE          shift and go to state 120
    LSTATE          reduce using rule 11 (statement -> NEWLINE statement .)
    NEWLINE         shift and go to state 17

  ! NEWLINE         [ reduce using rule 11 (statement -> NEWLINE statement .) ]


state 87

    (22) expression -> expression PLUS expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 22 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 22 (expression -> expression PLUS expression .)
    EQUTO           reduce using rule 22 (expression -> expression PLUS expression .)
    NOEQU           reduce using rule 22 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 22 (expression -> expression PLUS expression .)
    $end            reduce using rule 22 (expression -> expression PLUS expression .)
    LSTATE          reduce using rule 22 (expression -> expression PLUS expression .)
    RSTATE          reduce using rule 22 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS expression .)
    ,               reduce using rule 22 (expression -> expression PLUS expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! MUL             [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! MORE            [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 88

    (25) expression -> expression MINUS expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 25 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 25 (expression -> expression MINUS expression .)
    EQUTO           reduce using rule 25 (expression -> expression MINUS expression .)
    NOEQU           reduce using rule 25 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 25 (expression -> expression MINUS expression .)
    $end            reduce using rule 25 (expression -> expression MINUS expression .)
    LSTATE          reduce using rule 25 (expression -> expression MINUS expression .)
    RSTATE          reduce using rule 25 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 25 (expression -> expression MINUS expression .)
    ,               reduce using rule 25 (expression -> expression MINUS expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! MUL             [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! MORE            [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 89

    (28) expression -> expression MUL expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 28 (expression -> expression MUL expression .)
    MINUS           reduce using rule 28 (expression -> expression MUL expression .)
    MUL             reduce using rule 28 (expression -> expression MUL expression .)
    DIV             reduce using rule 28 (expression -> expression MUL expression .)
    MOD             reduce using rule 28 (expression -> expression MUL expression .)
    EQUTO           reduce using rule 28 (expression -> expression MUL expression .)
    NOEQU           reduce using rule 28 (expression -> expression MUL expression .)
    NEWLINE         reduce using rule 28 (expression -> expression MUL expression .)
    $end            reduce using rule 28 (expression -> expression MUL expression .)
    LSTATE          reduce using rule 28 (expression -> expression MUL expression .)
    RSTATE          reduce using rule 28 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 28 (expression -> expression MUL expression .)
    ,               reduce using rule 28 (expression -> expression MUL expression .)
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! LESS            [ reduce using rule 28 (expression -> expression MUL expression .) ]
  ! MORE            [ reduce using rule 28 (expression -> expression MUL expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 90

    (31) expression -> expression DIV expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 31 (expression -> expression DIV expression .)
    MINUS           reduce using rule 31 (expression -> expression DIV expression .)
    MUL             reduce using rule 31 (expression -> expression DIV expression .)
    DIV             reduce using rule 31 (expression -> expression DIV expression .)
    MOD             reduce using rule 31 (expression -> expression DIV expression .)
    EQUTO           reduce using rule 31 (expression -> expression DIV expression .)
    NOEQU           reduce using rule 31 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 31 (expression -> expression DIV expression .)
    $end            reduce using rule 31 (expression -> expression DIV expression .)
    LSTATE          reduce using rule 31 (expression -> expression DIV expression .)
    RSTATE          reduce using rule 31 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 31 (expression -> expression DIV expression .)
    ,               reduce using rule 31 (expression -> expression DIV expression .)
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! LESS            [ reduce using rule 31 (expression -> expression DIV expression .) ]
  ! MORE            [ reduce using rule 31 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 91

    (34) expression -> expression MOD expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 34 (expression -> expression MOD expression .)
    MINUS           reduce using rule 34 (expression -> expression MOD expression .)
    MUL             reduce using rule 34 (expression -> expression MOD expression .)
    DIV             reduce using rule 34 (expression -> expression MOD expression .)
    MOD             reduce using rule 34 (expression -> expression MOD expression .)
    EQUTO           reduce using rule 34 (expression -> expression MOD expression .)
    NOEQU           reduce using rule 34 (expression -> expression MOD expression .)
    NEWLINE         reduce using rule 34 (expression -> expression MOD expression .)
    $end            reduce using rule 34 (expression -> expression MOD expression .)
    LSTATE          reduce using rule 34 (expression -> expression MOD expression .)
    RSTATE          reduce using rule 34 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 34 (expression -> expression MOD expression .)
    ,               reduce using rule 34 (expression -> expression MOD expression .)
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! LESS            [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! MORE            [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 92

    (50) expression -> expression EQUTO expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUTO resolved as shift
  ! shift/reduce conflict for NOEQU resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    NEWLINE         reduce using rule 50 (expression -> expression EQUTO expression .)
    $end            reduce using rule 50 (expression -> expression EQUTO expression .)
    LSTATE          reduce using rule 50 (expression -> expression EQUTO expression .)
    RSTATE          reduce using rule 50 (expression -> expression EQUTO expression .)
    RPAREN          reduce using rule 50 (expression -> expression EQUTO expression .)
    ,               reduce using rule 50 (expression -> expression EQUTO expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! PLUS            [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! MUL             [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! DIV             [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! EQUTO           [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! NOEQU           [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! LESS            [ reduce using rule 50 (expression -> expression EQUTO expression .) ]
  ! MORE            [ reduce using rule 50 (expression -> expression EQUTO expression .) ]


state 93

    (51) expression -> expression NOEQU expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUTO resolved as shift
  ! shift/reduce conflict for NOEQU resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    NEWLINE         reduce using rule 51 (expression -> expression NOEQU expression .)
    $end            reduce using rule 51 (expression -> expression NOEQU expression .)
    LSTATE          reduce using rule 51 (expression -> expression NOEQU expression .)
    RSTATE          reduce using rule 51 (expression -> expression NOEQU expression .)
    RPAREN          reduce using rule 51 (expression -> expression NOEQU expression .)
    ,               reduce using rule 51 (expression -> expression NOEQU expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! PLUS            [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! MUL             [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! EQUTO           [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! NOEQU           [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! LESS            [ reduce using rule 51 (expression -> expression NOEQU expression .) ]
  ! MORE            [ reduce using rule 51 (expression -> expression NOEQU expression .) ]


state 94

    (52) expression -> expression LESS expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 52 (expression -> expression LESS expression .)
    MINUS           reduce using rule 52 (expression -> expression LESS expression .)
    MUL             reduce using rule 52 (expression -> expression LESS expression .)
    DIV             reduce using rule 52 (expression -> expression LESS expression .)
    MOD             reduce using rule 52 (expression -> expression LESS expression .)
    EQUTO           reduce using rule 52 (expression -> expression LESS expression .)
    NOEQU           reduce using rule 52 (expression -> expression LESS expression .)
    LESS            reduce using rule 52 (expression -> expression LESS expression .)
    MORE            reduce using rule 52 (expression -> expression LESS expression .)
    NEWLINE         reduce using rule 52 (expression -> expression LESS expression .)
    $end            reduce using rule 52 (expression -> expression LESS expression .)
    LSTATE          reduce using rule 52 (expression -> expression LESS expression .)
    RSTATE          reduce using rule 52 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 52 (expression -> expression LESS expression .)
    ,               reduce using rule 52 (expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]
  ! LESS            [ shift and go to state 65 ]
  ! MORE            [ shift and go to state 66 ]


state 95

    (53) expression -> expression MORE expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 53 (expression -> expression MORE expression .)
    MINUS           reduce using rule 53 (expression -> expression MORE expression .)
    MUL             reduce using rule 53 (expression -> expression MORE expression .)
    DIV             reduce using rule 53 (expression -> expression MORE expression .)
    MOD             reduce using rule 53 (expression -> expression MORE expression .)
    EQUTO           reduce using rule 53 (expression -> expression MORE expression .)
    NOEQU           reduce using rule 53 (expression -> expression MORE expression .)
    LESS            reduce using rule 53 (expression -> expression MORE expression .)
    MORE            reduce using rule 53 (expression -> expression MORE expression .)
    NEWLINE         reduce using rule 53 (expression -> expression MORE expression .)
    $end            reduce using rule 53 (expression -> expression MORE expression .)
    LSTATE          reduce using rule 53 (expression -> expression MORE expression .)
    RSTATE          reduce using rule 53 (expression -> expression MORE expression .)
    RPAREN          reduce using rule 53 (expression -> expression MORE expression .)
    ,               reduce using rule 53 (expression -> expression MORE expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]
  ! LESS            [ shift and go to state 65 ]
  ! MORE            [ shift and go to state 66 ]


state 96

    (23) expression -> term PLUS term .
    (23) expression -> term . PLUS term
    (24) expression -> term . PLUS expression
    (26) expression -> term . MINUS term
    (27) expression -> term . MINUS expression
    (29) expression -> term . MUL term
    (30) expression -> term . MUL expression
    (32) expression -> term . DIV term
    (33) expression -> term . DIV expression
    (35) expression -> term . MOD term
    (36) expression -> term . MOD expression
    (45) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (expression -> term PLUS term .)
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for EQUTO resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for LESS resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for MORE resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for $end resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (expression -> term PLUS term .)
  ! reduce/reduce conflict for , resolved using rule 23 (expression -> term PLUS term .)
    PLUS            reduce using rule 23 (expression -> term PLUS term .)
    MINUS           reduce using rule 23 (expression -> term PLUS term .)
    EQUTO           reduce using rule 23 (expression -> term PLUS term .)
    NOEQU           reduce using rule 23 (expression -> term PLUS term .)
    LESS            reduce using rule 23 (expression -> term PLUS term .)
    MORE            reduce using rule 23 (expression -> term PLUS term .)
    NEWLINE         reduce using rule 23 (expression -> term PLUS term .)
    $end            reduce using rule 23 (expression -> term PLUS term .)
    LSTATE          reduce using rule 23 (expression -> term PLUS term .)
    RSTATE          reduce using rule 23 (expression -> term PLUS term .)
    RPAREN          reduce using rule 23 (expression -> term PLUS term .)
    ,               reduce using rule 23 (expression -> term PLUS term .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

  ! MUL             [ reduce using rule 23 (expression -> term PLUS term .) ]
  ! DIV             [ reduce using rule 23 (expression -> term PLUS term .) ]
  ! MOD             [ reduce using rule 23 (expression -> term PLUS term .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! PLUS            [ reduce using rule 45 (expression -> term .) ]
  ! MINUS           [ reduce using rule 45 (expression -> term .) ]
  ! MUL             [ reduce using rule 45 (expression -> term .) ]
  ! DIV             [ reduce using rule 45 (expression -> term .) ]
  ! MOD             [ reduce using rule 45 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 45 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 45 (expression -> term .) ]
  ! LESS            [ reduce using rule 45 (expression -> term .) ]
  ! MORE            [ reduce using rule 45 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 45 (expression -> term .) ]
  ! $end            [ reduce using rule 45 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 45 (expression -> term .) ]
  ! ,               [ reduce using rule 45 (expression -> term .) ]


state 97

    (24) expression -> term PLUS expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 24 (expression -> term PLUS expression .)
    MINUS           reduce using rule 24 (expression -> term PLUS expression .)
    EQUTO           reduce using rule 24 (expression -> term PLUS expression .)
    NOEQU           reduce using rule 24 (expression -> term PLUS expression .)
    NEWLINE         reduce using rule 24 (expression -> term PLUS expression .)
    $end            reduce using rule 24 (expression -> term PLUS expression .)
    LSTATE          reduce using rule 24 (expression -> term PLUS expression .)
    RSTATE          reduce using rule 24 (expression -> term PLUS expression .)
    RPAREN          reduce using rule 24 (expression -> term PLUS expression .)
    ,               reduce using rule 24 (expression -> term PLUS expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! MUL             [ reduce using rule 24 (expression -> term PLUS expression .) ]
  ! DIV             [ reduce using rule 24 (expression -> term PLUS expression .) ]
  ! MOD             [ reduce using rule 24 (expression -> term PLUS expression .) ]
  ! LESS            [ reduce using rule 24 (expression -> term PLUS expression .) ]
  ! MORE            [ reduce using rule 24 (expression -> term PLUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 98

    (26) expression -> term MINUS term .
    (23) expression -> term . PLUS term
    (24) expression -> term . PLUS expression
    (26) expression -> term . MINUS term
    (27) expression -> term . MINUS expression
    (29) expression -> term . MUL term
    (30) expression -> term . MUL expression
    (32) expression -> term . DIV term
    (33) expression -> term . DIV expression
    (35) expression -> term . MOD term
    (36) expression -> term . MOD expression
    (45) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 26 (expression -> term MINUS term .)
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for EQUTO resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for LESS resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for MORE resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for $end resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 26 (expression -> term MINUS term .)
  ! reduce/reduce conflict for , resolved using rule 26 (expression -> term MINUS term .)
    PLUS            reduce using rule 26 (expression -> term MINUS term .)
    MINUS           reduce using rule 26 (expression -> term MINUS term .)
    EQUTO           reduce using rule 26 (expression -> term MINUS term .)
    NOEQU           reduce using rule 26 (expression -> term MINUS term .)
    LESS            reduce using rule 26 (expression -> term MINUS term .)
    MORE            reduce using rule 26 (expression -> term MINUS term .)
    NEWLINE         reduce using rule 26 (expression -> term MINUS term .)
    $end            reduce using rule 26 (expression -> term MINUS term .)
    LSTATE          reduce using rule 26 (expression -> term MINUS term .)
    RSTATE          reduce using rule 26 (expression -> term MINUS term .)
    RPAREN          reduce using rule 26 (expression -> term MINUS term .)
    ,               reduce using rule 26 (expression -> term MINUS term .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

  ! MUL             [ reduce using rule 26 (expression -> term MINUS term .) ]
  ! DIV             [ reduce using rule 26 (expression -> term MINUS term .) ]
  ! MOD             [ reduce using rule 26 (expression -> term MINUS term .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! PLUS            [ reduce using rule 45 (expression -> term .) ]
  ! MINUS           [ reduce using rule 45 (expression -> term .) ]
  ! MUL             [ reduce using rule 45 (expression -> term .) ]
  ! DIV             [ reduce using rule 45 (expression -> term .) ]
  ! MOD             [ reduce using rule 45 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 45 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 45 (expression -> term .) ]
  ! LESS            [ reduce using rule 45 (expression -> term .) ]
  ! MORE            [ reduce using rule 45 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 45 (expression -> term .) ]
  ! $end            [ reduce using rule 45 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 45 (expression -> term .) ]
  ! ,               [ reduce using rule 45 (expression -> term .) ]


state 99

    (27) expression -> term MINUS expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 27 (expression -> term MINUS expression .)
    MINUS           reduce using rule 27 (expression -> term MINUS expression .)
    EQUTO           reduce using rule 27 (expression -> term MINUS expression .)
    NOEQU           reduce using rule 27 (expression -> term MINUS expression .)
    NEWLINE         reduce using rule 27 (expression -> term MINUS expression .)
    $end            reduce using rule 27 (expression -> term MINUS expression .)
    LSTATE          reduce using rule 27 (expression -> term MINUS expression .)
    RSTATE          reduce using rule 27 (expression -> term MINUS expression .)
    RPAREN          reduce using rule 27 (expression -> term MINUS expression .)
    ,               reduce using rule 27 (expression -> term MINUS expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! MUL             [ reduce using rule 27 (expression -> term MINUS expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> term MINUS expression .) ]
  ! MOD             [ reduce using rule 27 (expression -> term MINUS expression .) ]
  ! LESS            [ reduce using rule 27 (expression -> term MINUS expression .) ]
  ! MORE            [ reduce using rule 27 (expression -> term MINUS expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 100

    (29) expression -> term MUL term .
    (23) expression -> term . PLUS term
    (24) expression -> term . PLUS expression
    (26) expression -> term . MINUS term
    (27) expression -> term . MINUS expression
    (29) expression -> term . MUL term
    (30) expression -> term . MUL expression
    (32) expression -> term . DIV term
    (33) expression -> term . DIV expression
    (35) expression -> term . MOD term
    (36) expression -> term . MOD expression
    (45) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for MUL resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for DIV resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for MOD resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for EQUTO resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for LESS resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for MORE resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for $end resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (expression -> term MUL term .)
  ! reduce/reduce conflict for , resolved using rule 29 (expression -> term MUL term .)
    PLUS            reduce using rule 29 (expression -> term MUL term .)
    MINUS           reduce using rule 29 (expression -> term MUL term .)
    MUL             reduce using rule 29 (expression -> term MUL term .)
    DIV             reduce using rule 29 (expression -> term MUL term .)
    MOD             reduce using rule 29 (expression -> term MUL term .)
    EQUTO           reduce using rule 29 (expression -> term MUL term .)
    NOEQU           reduce using rule 29 (expression -> term MUL term .)
    LESS            reduce using rule 29 (expression -> term MUL term .)
    MORE            reduce using rule 29 (expression -> term MUL term .)
    NEWLINE         reduce using rule 29 (expression -> term MUL term .)
    $end            reduce using rule 29 (expression -> term MUL term .)
    LSTATE          reduce using rule 29 (expression -> term MUL term .)
    RSTATE          reduce using rule 29 (expression -> term MUL term .)
    RPAREN          reduce using rule 29 (expression -> term MUL term .)
    ,               reduce using rule 29 (expression -> term MUL term .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]
  ! PLUS            [ reduce using rule 45 (expression -> term .) ]
  ! MINUS           [ reduce using rule 45 (expression -> term .) ]
  ! MUL             [ reduce using rule 45 (expression -> term .) ]
  ! DIV             [ reduce using rule 45 (expression -> term .) ]
  ! MOD             [ reduce using rule 45 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 45 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 45 (expression -> term .) ]
  ! LESS            [ reduce using rule 45 (expression -> term .) ]
  ! MORE            [ reduce using rule 45 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 45 (expression -> term .) ]
  ! $end            [ reduce using rule 45 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 45 (expression -> term .) ]
  ! ,               [ reduce using rule 45 (expression -> term .) ]


state 101

    (30) expression -> term MUL expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 30 (expression -> term MUL expression .)
    MINUS           reduce using rule 30 (expression -> term MUL expression .)
    MUL             reduce using rule 30 (expression -> term MUL expression .)
    DIV             reduce using rule 30 (expression -> term MUL expression .)
    MOD             reduce using rule 30 (expression -> term MUL expression .)
    EQUTO           reduce using rule 30 (expression -> term MUL expression .)
    NOEQU           reduce using rule 30 (expression -> term MUL expression .)
    NEWLINE         reduce using rule 30 (expression -> term MUL expression .)
    $end            reduce using rule 30 (expression -> term MUL expression .)
    LSTATE          reduce using rule 30 (expression -> term MUL expression .)
    RSTATE          reduce using rule 30 (expression -> term MUL expression .)
    RPAREN          reduce using rule 30 (expression -> term MUL expression .)
    ,               reduce using rule 30 (expression -> term MUL expression .)
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! LESS            [ reduce using rule 30 (expression -> term MUL expression .) ]
  ! MORE            [ reduce using rule 30 (expression -> term MUL expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 102

    (32) expression -> term DIV term .
    (23) expression -> term . PLUS term
    (24) expression -> term . PLUS expression
    (26) expression -> term . MINUS term
    (27) expression -> term . MINUS expression
    (29) expression -> term . MUL term
    (30) expression -> term . MUL expression
    (32) expression -> term . DIV term
    (33) expression -> term . DIV expression
    (35) expression -> term . MOD term
    (36) expression -> term . MOD expression
    (45) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for MINUS resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for MUL resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for DIV resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for MOD resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for EQUTO resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for LESS resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for MORE resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for $end resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> term DIV term .)
  ! reduce/reduce conflict for , resolved using rule 32 (expression -> term DIV term .)
    PLUS            reduce using rule 32 (expression -> term DIV term .)
    MINUS           reduce using rule 32 (expression -> term DIV term .)
    MUL             reduce using rule 32 (expression -> term DIV term .)
    DIV             reduce using rule 32 (expression -> term DIV term .)
    MOD             reduce using rule 32 (expression -> term DIV term .)
    EQUTO           reduce using rule 32 (expression -> term DIV term .)
    NOEQU           reduce using rule 32 (expression -> term DIV term .)
    LESS            reduce using rule 32 (expression -> term DIV term .)
    MORE            reduce using rule 32 (expression -> term DIV term .)
    NEWLINE         reduce using rule 32 (expression -> term DIV term .)
    $end            reduce using rule 32 (expression -> term DIV term .)
    LSTATE          reduce using rule 32 (expression -> term DIV term .)
    RSTATE          reduce using rule 32 (expression -> term DIV term .)
    RPAREN          reduce using rule 32 (expression -> term DIV term .)
    ,               reduce using rule 32 (expression -> term DIV term .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]
  ! PLUS            [ reduce using rule 45 (expression -> term .) ]
  ! MINUS           [ reduce using rule 45 (expression -> term .) ]
  ! MUL             [ reduce using rule 45 (expression -> term .) ]
  ! DIV             [ reduce using rule 45 (expression -> term .) ]
  ! MOD             [ reduce using rule 45 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 45 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 45 (expression -> term .) ]
  ! LESS            [ reduce using rule 45 (expression -> term .) ]
  ! MORE            [ reduce using rule 45 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 45 (expression -> term .) ]
  ! $end            [ reduce using rule 45 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 45 (expression -> term .) ]
  ! ,               [ reduce using rule 45 (expression -> term .) ]


state 103

    (33) expression -> term DIV expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 33 (expression -> term DIV expression .)
    MINUS           reduce using rule 33 (expression -> term DIV expression .)
    MUL             reduce using rule 33 (expression -> term DIV expression .)
    DIV             reduce using rule 33 (expression -> term DIV expression .)
    MOD             reduce using rule 33 (expression -> term DIV expression .)
    EQUTO           reduce using rule 33 (expression -> term DIV expression .)
    NOEQU           reduce using rule 33 (expression -> term DIV expression .)
    NEWLINE         reduce using rule 33 (expression -> term DIV expression .)
    $end            reduce using rule 33 (expression -> term DIV expression .)
    LSTATE          reduce using rule 33 (expression -> term DIV expression .)
    RSTATE          reduce using rule 33 (expression -> term DIV expression .)
    RPAREN          reduce using rule 33 (expression -> term DIV expression .)
    ,               reduce using rule 33 (expression -> term DIV expression .)
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! LESS            [ reduce using rule 33 (expression -> term DIV expression .) ]
  ! MORE            [ reduce using rule 33 (expression -> term DIV expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 104

    (35) expression -> term MOD term .
    (23) expression -> term . PLUS term
    (24) expression -> term . PLUS expression
    (26) expression -> term . MINUS term
    (27) expression -> term . MINUS expression
    (29) expression -> term . MUL term
    (30) expression -> term . MUL expression
    (32) expression -> term . DIV term
    (33) expression -> term . DIV expression
    (35) expression -> term . MOD term
    (36) expression -> term . MOD expression
    (45) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for MUL resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for DIV resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for MOD resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for EQUTO resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for LESS resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for MORE resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for $end resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> term MOD term .)
  ! reduce/reduce conflict for , resolved using rule 35 (expression -> term MOD term .)
    PLUS            reduce using rule 35 (expression -> term MOD term .)
    MINUS           reduce using rule 35 (expression -> term MOD term .)
    MUL             reduce using rule 35 (expression -> term MOD term .)
    DIV             reduce using rule 35 (expression -> term MOD term .)
    MOD             reduce using rule 35 (expression -> term MOD term .)
    EQUTO           reduce using rule 35 (expression -> term MOD term .)
    NOEQU           reduce using rule 35 (expression -> term MOD term .)
    LESS            reduce using rule 35 (expression -> term MOD term .)
    MORE            reduce using rule 35 (expression -> term MOD term .)
    NEWLINE         reduce using rule 35 (expression -> term MOD term .)
    $end            reduce using rule 35 (expression -> term MOD term .)
    LSTATE          reduce using rule 35 (expression -> term MOD term .)
    RSTATE          reduce using rule 35 (expression -> term MOD term .)
    RPAREN          reduce using rule 35 (expression -> term MOD term .)
    ,               reduce using rule 35 (expression -> term MOD term .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]
  ! PLUS            [ reduce using rule 45 (expression -> term .) ]
  ! MINUS           [ reduce using rule 45 (expression -> term .) ]
  ! MUL             [ reduce using rule 45 (expression -> term .) ]
  ! DIV             [ reduce using rule 45 (expression -> term .) ]
  ! MOD             [ reduce using rule 45 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 45 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 45 (expression -> term .) ]
  ! LESS            [ reduce using rule 45 (expression -> term .) ]
  ! MORE            [ reduce using rule 45 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 45 (expression -> term .) ]
  ! $end            [ reduce using rule 45 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 45 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 45 (expression -> term .) ]
  ! ,               [ reduce using rule 45 (expression -> term .) ]


state 105

    (36) expression -> term MOD expression .
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression

    PLUS            reduce using rule 36 (expression -> term MOD expression .)
    MINUS           reduce using rule 36 (expression -> term MOD expression .)
    MUL             reduce using rule 36 (expression -> term MOD expression .)
    DIV             reduce using rule 36 (expression -> term MOD expression .)
    MOD             reduce using rule 36 (expression -> term MOD expression .)
    EQUTO           reduce using rule 36 (expression -> term MOD expression .)
    NOEQU           reduce using rule 36 (expression -> term MOD expression .)
    NEWLINE         reduce using rule 36 (expression -> term MOD expression .)
    $end            reduce using rule 36 (expression -> term MOD expression .)
    LSTATE          reduce using rule 36 (expression -> term MOD expression .)
    RSTATE          reduce using rule 36 (expression -> term MOD expression .)
    RPAREN          reduce using rule 36 (expression -> term MOD expression .)
    ,               reduce using rule 36 (expression -> term MOD expression .)
    LESS            shift and go to state 65
    MORE            shift and go to state 66

  ! LESS            [ reduce using rule 36 (expression -> term MOD expression .) ]
  ! MORE            [ reduce using rule 36 (expression -> term MOD expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! EQUTO           [ shift and go to state 63 ]
  ! NOEQU           [ shift and go to state 64 ]


state 106

    (47) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    EQUTO           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    NOEQU           reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    MORE            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    LSTATE          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RSTATE          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 47 (expression -> LPAREN expression RPAREN .)
    ,               reduce using rule 47 (expression -> LPAREN expression RPAREN .)


state 107

    (55) declare -> DECL typeconst WORD EQU term .

    NEWLINE         reduce using rule 55 (declare -> DECL typeconst WORD EQU term .)
    $end            reduce using rule 55 (declare -> DECL typeconst WORD EQU term .)
    LSTATE          reduce using rule 55 (declare -> DECL typeconst WORD EQU term .)
    RSTATE          reduce using rule 55 (declare -> DECL typeconst WORD EQU term .)


state 108

    (58) declare -> DECL WORD EQU LSTATE arrayX . RSTATE

    RSTATE          shift and go to state 121


state 109

    (61) arrayX -> NUM . arrayY
    (62) arrayY -> . COMMA NUM arrayY
    (63) arrayY -> . empty empty empty
    (67) empty -> .

    COMMA           shift and go to state 123
    RSTATE          reduce using rule 67 (empty -> .)

    arrayY                         shift and go to state 122
    empty                          shift and go to state 124

state 110

    (59) declare -> DECL WORD LARRY NUM RARRY .
    (60) declare -> DECL WORD LARRY NUM RARRY . EQU LSTATE arrayX RSTATE

    NEWLINE         reduce using rule 59 (declare -> DECL WORD LARRY NUM RARRY .)
    $end            reduce using rule 59 (declare -> DECL WORD LARRY NUM RARRY .)
    LSTATE          reduce using rule 59 (declare -> DECL WORD LARRY NUM RARRY .)
    RSTATE          reduce using rule 59 (declare -> DECL WORD LARRY NUM RARRY .)
    EQU             shift and go to state 125


state 111

    (64) exprint -> TEXT LPAREN WORD printMore RPAREN .

    NEWLINE         reduce using rule 64 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    $end            reduce using rule 64 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    LSTATE          reduce using rule 64 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    RSTATE          reduce using rule 64 (exprint -> TEXT LPAREN WORD printMore RPAREN .)


state 112

    (65) printMore -> , expression . printMore
    (22) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (28) expression -> expression . MUL expression
    (31) expression -> expression . DIV expression
    (34) expression -> expression . MOD expression
    (50) expression -> expression . EQUTO expression
    (51) expression -> expression . NOEQU expression
    (52) expression -> expression . LESS expression
    (53) expression -> expression . MORE expression
    (65) printMore -> . , expression printMore
    (66) printMore -> . empty empty empty
    (67) empty -> .

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    EQUTO           shift and go to state 63
    NOEQU           shift and go to state 64
    LESS            shift and go to state 65
    MORE            shift and go to state 66
    ,               shift and go to state 80
    RPAREN          reduce using rule 67 (empty -> .)

    printMore                      shift and go to state 126
    empty                          shift and go to state 81

state 113

    (66) printMore -> empty empty . empty
    (67) empty -> .

    RPAREN          reduce using rule 67 (empty -> .)

    empty                          shift and go to state 127

state 114

    (13) exif -> SO LPAREN expression RPAREN LSTATE . statement RSTATE
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 128
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 115

    (14) exif -> SO LPAREN expression RPAREN NEWLINE . LSTATE statement RSTATE

    LSTATE          shift and go to state 129


state 116

    (18) exloop -> LOOP LPAREN expression RPAREN LSTATE . statement RSTATE
    (19) exloop -> LOOP LPAREN expression RPAREN LSTATE . NEWLINE statement RSTATE
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 131
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 130
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 117

    (20) exrepeat -> REPEAT LPAREN expression RPAREN LSTATE . statement RSTATE
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 132
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 118

    (21) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE . LSTATE statement RSTATE

    LSTATE          shift and go to state 133


state 119

    (16) exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .

    NEWLINE         reduce using rule 16 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    $end            reduce using rule 16 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    LSTATE          reduce using rule 16 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    RSTATE          reduce using rule 16 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)


state 120

    (17) exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .

    NEWLINE         reduce using rule 17 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    $end            reduce using rule 17 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    LSTATE          reduce using rule 17 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    RSTATE          reduce using rule 17 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)


state 121

    (58) declare -> DECL WORD EQU LSTATE arrayX RSTATE .

    NEWLINE         reduce using rule 58 (declare -> DECL WORD EQU LSTATE arrayX RSTATE .)
    $end            reduce using rule 58 (declare -> DECL WORD EQU LSTATE arrayX RSTATE .)
    LSTATE          reduce using rule 58 (declare -> DECL WORD EQU LSTATE arrayX RSTATE .)
    RSTATE          reduce using rule 58 (declare -> DECL WORD EQU LSTATE arrayX RSTATE .)


state 122

    (61) arrayX -> NUM arrayY .

    RSTATE          reduce using rule 61 (arrayX -> NUM arrayY .)


state 123

    (62) arrayY -> COMMA . NUM arrayY

    NUM             shift and go to state 134


state 124

    (63) arrayY -> empty . empty empty
    (67) empty -> .

    RSTATE          reduce using rule 67 (empty -> .)

    empty                          shift and go to state 135

state 125

    (60) declare -> DECL WORD LARRY NUM RARRY EQU . LSTATE arrayX RSTATE

    LSTATE          shift and go to state 136


state 126

    (65) printMore -> , expression printMore .

    RPAREN          reduce using rule 65 (printMore -> , expression printMore .)


state 127

    (66) printMore -> empty empty empty .

    RPAREN          reduce using rule 66 (printMore -> empty empty empty .)


state 128

    (13) exif -> SO LPAREN expression RPAREN LSTATE statement . RSTATE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    RSTATE          shift and go to state 137
    NEWLINE         shift and go to state 17


state 129

    (14) exif -> SO LPAREN expression RPAREN NEWLINE LSTATE . statement RSTATE
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 138
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 130

    (18) exloop -> LOOP LPAREN expression RPAREN LSTATE statement . RSTATE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    RSTATE          shift and go to state 139
    NEWLINE         shift and go to state 17


state 131

    (19) exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE . statement RSTATE
    (11) statement -> NEWLINE . statement
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 140
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 132

    (20) exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement . RSTATE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    RSTATE          shift and go to state 141
    NEWLINE         shift and go to state 17


state 133

    (21) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE . statement RSTATE
    (1) statement -> . statement NEWLINE statement
    (2) statement -> . statement NEWLINE statement NEWLINE
    (3) statement -> . exassign
    (4) statement -> . declare
    (5) statement -> . exprint
    (6) statement -> . exif
    (7) statement -> . exelif
    (8) statement -> . exloop
    (9) statement -> . exrepeat
    (10) statement -> . statement NEWLINE
    (11) statement -> . NEWLINE statement
    (12) statement -> . exloop NEWLINE
    (48) exassign -> . WORD EQU expression
    (49) exassign -> . arraysh EQU expression
    (54) declare -> . DECL typeconst WORD
    (55) declare -> . DECL typeconst WORD EQU term
    (58) declare -> . DECL WORD EQU LSTATE arrayX RSTATE
    (59) declare -> . DECL WORD LARRY NUM RARRY
    (60) declare -> . DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (64) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (13) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (14) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (15) exelif -> . exif exelse
    (18) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (20) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (21) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (56) arraysh -> . WORD LARRY NUM RARRY
    (57) arraysh -> . WORD LARRY WORD RARRY

    NEWLINE         shift and go to state 2
    WORD            shift and go to state 10
    DECL            shift and go to state 12
    TEXT            shift and go to state 13
    SO              shift and go to state 14
    LOOP            shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 142
    exassign                       shift and go to state 3
    declare                        shift and go to state 4
    exprint                        shift and go to state 5
    exif                           shift and go to state 6
    exelif                         shift and go to state 7
    exloop                         shift and go to state 8
    exrepeat                       shift and go to state 9
    arraysh                        shift and go to state 11

state 134

    (62) arrayY -> COMMA NUM . arrayY
    (62) arrayY -> . COMMA NUM arrayY
    (63) arrayY -> . empty empty empty
    (67) empty -> .

    COMMA           shift and go to state 123
    RSTATE          reduce using rule 67 (empty -> .)

    arrayY                         shift and go to state 143
    empty                          shift and go to state 124

state 135

    (63) arrayY -> empty empty . empty
    (67) empty -> .

    RSTATE          reduce using rule 67 (empty -> .)

    empty                          shift and go to state 144

state 136

    (60) declare -> DECL WORD LARRY NUM RARRY EQU LSTATE . arrayX RSTATE
    (61) arrayX -> . NUM arrayY

    NUM             shift and go to state 109

    arrayX                         shift and go to state 145

state 137

    (13) exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .

    OTHERWISE       reduce using rule 13 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    NEWLINE         reduce using rule 13 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    $end            reduce using rule 13 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    LSTATE          reduce using rule 13 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    RSTATE          reduce using rule 13 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)


state 138

    (14) exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement . RSTATE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    RSTATE          shift and go to state 146
    NEWLINE         shift and go to state 17


state 139

    (18) exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .

    NEWLINE         reduce using rule 18 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    $end            reduce using rule 18 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    LSTATE          reduce using rule 18 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    RSTATE          reduce using rule 18 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)


state 140

    (19) exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement . RSTATE
    (11) statement -> NEWLINE statement .
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

  ! shift/reduce conflict for RSTATE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    RSTATE          shift and go to state 147
    NEWLINE         shift and go to state 17

  ! RSTATE          [ reduce using rule 11 (statement -> NEWLINE statement .) ]
  ! NEWLINE         [ reduce using rule 11 (statement -> NEWLINE statement .) ]


state 141

    (20) exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .

    NEWLINE         reduce using rule 20 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    $end            reduce using rule 20 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    LSTATE          reduce using rule 20 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    RSTATE          reduce using rule 20 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)


state 142

    (21) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement . RSTATE
    (1) statement -> statement . NEWLINE statement
    (2) statement -> statement . NEWLINE statement NEWLINE
    (10) statement -> statement . NEWLINE

    RSTATE          shift and go to state 148
    NEWLINE         shift and go to state 17


state 143

    (62) arrayY -> COMMA NUM arrayY .

    RSTATE          reduce using rule 62 (arrayY -> COMMA NUM arrayY .)


state 144

    (63) arrayY -> empty empty empty .

    RSTATE          reduce using rule 63 (arrayY -> empty empty empty .)


state 145

    (60) declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX . RSTATE

    RSTATE          shift and go to state 149


state 146

    (14) exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .

    OTHERWISE       reduce using rule 14 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    NEWLINE         reduce using rule 14 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    $end            reduce using rule 14 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LSTATE          reduce using rule 14 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    RSTATE          reduce using rule 14 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)


state 147

    (19) exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .

    NEWLINE         reduce using rule 19 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    $end            reduce using rule 19 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    LSTATE          reduce using rule 19 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    RSTATE          reduce using rule 19 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)


state 148

    (21) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .

    NEWLINE         reduce using rule 21 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    $end            reduce using rule 21 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LSTATE          reduce using rule 21 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    RSTATE          reduce using rule 21 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)


state 149

    (60) declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .

    NEWLINE         reduce using rule 60 (declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    $end            reduce using rule 60 (declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    LSTATE          reduce using rule 60 (declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    RSTATE          reduce using rule 60 (declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 8 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 17 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 18 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MUL in state 39 resolved as shift
WARNING: shift/reduce conflict for DIV in state 39 resolved as shift
WARNING: shift/reduce conflict for MOD in state 39 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 55 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MUL in state 92 resolved as shift
WARNING: shift/reduce conflict for DIV in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUTO in state 92 resolved as shift
WARNING: shift/reduce conflict for NOEQU in state 92 resolved as shift
WARNING: shift/reduce conflict for LESS in state 92 resolved as shift
WARNING: shift/reduce conflict for MORE in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MUL in state 93 resolved as shift
WARNING: shift/reduce conflict for DIV in state 93 resolved as shift
WARNING: shift/reduce conflict for MOD in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUTO in state 93 resolved as shift
WARNING: shift/reduce conflict for NOEQU in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS in state 93 resolved as shift
WARNING: shift/reduce conflict for MORE in state 93 resolved as shift
WARNING: shift/reduce conflict for MUL in state 96 resolved as shift
WARNING: shift/reduce conflict for DIV in state 96 resolved as shift
WARNING: shift/reduce conflict for MOD in state 96 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for RSTATE in state 140 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 55 resolved using rule (statement -> statement NEWLINE statement NEWLINE)
WARNING: rejected rule (statement -> statement NEWLINE) in state 55
WARNING: reduce/reduce conflict in state 96 resolved using rule (expression -> term PLUS term)
WARNING: rejected rule (expression -> term) in state 96
WARNING: reduce/reduce conflict in state 98 resolved using rule (expression -> term MINUS term)
WARNING: rejected rule (expression -> term) in state 98
WARNING: reduce/reduce conflict in state 100 resolved using rule (expression -> term MUL term)
WARNING: rejected rule (expression -> term) in state 100
WARNING: reduce/reduce conflict in state 102 resolved using rule (expression -> term DIV term)
WARNING: rejected rule (expression -> term) in state 102
WARNING: reduce/reduce conflict in state 104 resolved using rule (expression -> term MOD term)
WARNING: rejected rule (expression -> term) in state 104

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACK
    DECADE
    DECL
    INT64
    NOTSO
    SEMI

Grammar

Rule 0     S' -> line
Rule 1     line -> Input line
Rule 2     line -> EXIT empty
Rule 3     EXIT -> <empty>
Rule 4     Input -> statement
Rule 5     Input -> expression
Rule 6     statement -> statement NEWLINE statement
Rule 7     statement -> statement NEWLINE statement NEWLINE
Rule 8     statement -> exassign
Rule 9     statement -> declare
Rule 10    statement -> exprint
Rule 11    statement -> exif
Rule 12    statement -> exelif
Rule 13    statement -> exloop
Rule 14    statement -> exrepeat
Rule 15    statement -> statement NEWLINE
Rule 16    statement -> NEWLINE statement
Rule 17    statement -> exloop NEWLINE
Rule 18    exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE
Rule 19    exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
Rule 20    exelif -> exif exelse
Rule 21    exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE
Rule 22    exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE
Rule 23    exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE
Rule 24    exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
Rule 25    exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
Rule 26    exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
Rule 27    expression -> expression PLUS expression
Rule 28    expression -> term PLUS term
Rule 29    expression -> term PLUS expression
Rule 30    expression -> expression MINUS expression
Rule 31    expression -> term MINUS term
Rule 32    expression -> term MINUS expression
Rule 33    expression -> expression MUL expression
Rule 34    expression -> term MUL term
Rule 35    expression -> term MUL expression
Rule 36    expression -> expression DIV expression
Rule 37    expression -> term DIV term
Rule 38    expression -> term DIV expression
Rule 39    expression -> expression MOD expression
Rule 40    expression -> term MOD term
Rule 41    expression -> term MOD expression
Rule 42    term -> WORD
Rule 43    term -> arraysh
Rule 44    term -> NUM
Rule 45    term -> HEX
Rule 46    typeconst -> TYPE_H
Rule 47    typeconst -> TYPE_N
Rule 48    typeconst -> TYPE_A
Rule 49    typeconst -> TYPE_S
Rule 50    expression -> term
Rule 51    expression -> MINUS expression
Rule 52    expression -> LPAREN expression RPAREN
Rule 53    exassign -> WORD EQU expression
Rule 54    exassign -> arraysh EQU expression
Rule 55    expression -> expression EQUTO expression
Rule 56    expression -> expression NOEQU expression
Rule 57    expression -> expression LESS expression
Rule 58    expression -> expression MORE expression
Rule 59    declare -> typeconst WORD
Rule 60    declare -> typeconst WORD EQU term
Rule 61    arraysh -> WORD LARRY NUM RARRY
Rule 62    arraysh -> WORD LARRY WORD RARRY
Rule 63    declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE
Rule 64    declare -> TYPE_A WORD LARRY NUM RARRY
Rule 65    declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
Rule 66    arrayX -> NUM arrayY
Rule 67    arrayY -> COMMA NUM arrayY
Rule 68    arrayY -> empty empty empty
Rule 69    exprint -> TEXT LPAREN WORD printMore RPAREN
Rule 70    printMore -> , expression printMore
Rule 71    printMore -> empty empty empty
Rule 72    empty -> <empty>

Terminals, with rules where they appear

,                    : 70
BACK                 : 
COMMA                : 67
DECADE               : 
DECL                 : 
DIV                  : 36 37 38
EQU                  : 53 54 60 63 65
EQUTO                : 55
HEX                  : 45
INT64                : 
LARRY                : 61 62 64 65
LESS                 : 57
LOOP                 : 23 24
LPAREN               : 18 19 23 24 25 26 52 69
LSTATE               : 18 19 21 21 22 23 24 25 26 63 65
MINUS                : 30 31 32 51
MOD                  : 39 40 41
MORE                 : 58
MUL                  : 33 34 35
NEWLINE              : 6 7 7 15 16 17 19 22 24 26
NOEQU                : 56
NOTSO                : 
NUM                  : 44 61 64 65 66 67
OTHERWISE            : 21 21 22
PLUS                 : 27 28 29
RARRY                : 61 62 64 65
REPEAT               : 25 26
RPAREN               : 18 19 23 24 25 26 52 69
RSTATE               : 18 19 22 23 24 25 26 63 65
SEMI                 : 
SO                   : 18 19
TEXT                 : 69
TYPE_A               : 48 63 64 65
TYPE_H               : 46
TYPE_N               : 47
TYPE_S               : 49
WORD                 : 42 53 59 60 61 62 62 63 64 65 69
error                : 

Nonterminals, with rules where they appear

EXIT                 : 2
Input                : 1
arrayX               : 63 65
arrayY               : 66 67
arraysh              : 43 54
declare              : 9
empty                : 2 68 68 68 71 71 71
exassign             : 8
exelif               : 12
exelse               : 20
exif                 : 11 20
exloop               : 13 17
expression           : 5 18 19 23 24 25 26 27 27 29 30 30 32 33 33 35 36 36 38 39 39 41 51 52 53 54 55 55 56 56 57 57 58 58 70
exprint              : 10
exrepeat             : 14
line                 : 1 0
printMore            : 69 70
statement            : 4 6 6 7 7 15 16 18 19 21 22 23 24 25 26
term                 : 28 28 29 31 31 32 34 34 35 37 37 38 40 40 41 50 60
typeconst            : 59 60

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . Input line
    (2) line -> . EXIT empty
    (4) Input -> . statement
    (5) Input -> . expression
    (3) EXIT -> .
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    $end            reduce using rule 3 (EXIT -> .)
    NEWLINE         shift and go to state 6
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 17
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    line                           shift and go to state 1
    Input                          shift and go to state 2
    EXIT                           shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    term                           shift and go to state 14
    arraysh                        shift and go to state 18
    typeconst                      shift and go to state 19

state 1

    (0) S' -> line .



state 2

    (1) line -> Input . line
    (1) line -> . Input line
    (2) line -> . EXIT empty
    (4) Input -> . statement
    (5) Input -> . expression
    (3) EXIT -> .
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    $end            reduce using rule 3 (EXIT -> .)
    NEWLINE         shift and go to state 6
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 17
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    Input                          shift and go to state 2
    line                           shift and go to state 30
    EXIT                           shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    term                           shift and go to state 14
    arraysh                        shift and go to state 18
    typeconst                      shift and go to state 19

state 3

    (2) line -> EXIT . empty
    (72) empty -> .

    $end            reduce using rule 72 (empty -> .)

    empty                          shift and go to state 31

state 4

    (4) Input -> statement .
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    MINUS           reduce using rule 4 (Input -> statement .)
    LPAREN          reduce using rule 4 (Input -> statement .)
    WORD            reduce using rule 4 (Input -> statement .)
    TYPE_A          reduce using rule 4 (Input -> statement .)
    TEXT            reduce using rule 4 (Input -> statement .)
    SO              reduce using rule 4 (Input -> statement .)
    LOOP            reduce using rule 4 (Input -> statement .)
    REPEAT          reduce using rule 4 (Input -> statement .)
    NUM             reduce using rule 4 (Input -> statement .)
    HEX             reduce using rule 4 (Input -> statement .)
    TYPE_H          reduce using rule 4 (Input -> statement .)
    TYPE_N          reduce using rule 4 (Input -> statement .)
    TYPE_S          reduce using rule 4 (Input -> statement .)
    $end            reduce using rule 4 (Input -> statement .)
    NEWLINE         shift and go to state 32

  ! NEWLINE         [ reduce using rule 4 (Input -> statement .) ]


state 5

    (5) Input -> expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

  ! shift/reduce conflict for MINUS resolved as shift
    NEWLINE         reduce using rule 5 (Input -> expression .)
    LPAREN          reduce using rule 5 (Input -> expression .)
    WORD            reduce using rule 5 (Input -> expression .)
    TYPE_A          reduce using rule 5 (Input -> expression .)
    TEXT            reduce using rule 5 (Input -> expression .)
    SO              reduce using rule 5 (Input -> expression .)
    LOOP            reduce using rule 5 (Input -> expression .)
    REPEAT          reduce using rule 5 (Input -> expression .)
    NUM             reduce using rule 5 (Input -> expression .)
    HEX             reduce using rule 5 (Input -> expression .)
    TYPE_H          reduce using rule 5 (Input -> expression .)
    TYPE_N          reduce using rule 5 (Input -> expression .)
    TYPE_S          reduce using rule 5 (Input -> expression .)
    $end            reduce using rule 5 (Input -> expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MINUS           [ reduce using rule 5 (Input -> expression .) ]


state 6

    (16) statement -> NEWLINE . statement
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 42
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 7

    (8) statement -> exassign .

    NEWLINE         reduce using rule 8 (statement -> exassign .)
    MINUS           reduce using rule 8 (statement -> exassign .)
    LPAREN          reduce using rule 8 (statement -> exassign .)
    WORD            reduce using rule 8 (statement -> exassign .)
    TYPE_A          reduce using rule 8 (statement -> exassign .)
    TEXT            reduce using rule 8 (statement -> exassign .)
    SO              reduce using rule 8 (statement -> exassign .)
    LOOP            reduce using rule 8 (statement -> exassign .)
    REPEAT          reduce using rule 8 (statement -> exassign .)
    NUM             reduce using rule 8 (statement -> exassign .)
    HEX             reduce using rule 8 (statement -> exassign .)
    TYPE_H          reduce using rule 8 (statement -> exassign .)
    TYPE_N          reduce using rule 8 (statement -> exassign .)
    TYPE_S          reduce using rule 8 (statement -> exassign .)
    $end            reduce using rule 8 (statement -> exassign .)
    LSTATE          reduce using rule 8 (statement -> exassign .)
    RSTATE          reduce using rule 8 (statement -> exassign .)


state 8

    (9) statement -> declare .

    NEWLINE         reduce using rule 9 (statement -> declare .)
    MINUS           reduce using rule 9 (statement -> declare .)
    LPAREN          reduce using rule 9 (statement -> declare .)
    WORD            reduce using rule 9 (statement -> declare .)
    TYPE_A          reduce using rule 9 (statement -> declare .)
    TEXT            reduce using rule 9 (statement -> declare .)
    SO              reduce using rule 9 (statement -> declare .)
    LOOP            reduce using rule 9 (statement -> declare .)
    REPEAT          reduce using rule 9 (statement -> declare .)
    NUM             reduce using rule 9 (statement -> declare .)
    HEX             reduce using rule 9 (statement -> declare .)
    TYPE_H          reduce using rule 9 (statement -> declare .)
    TYPE_N          reduce using rule 9 (statement -> declare .)
    TYPE_S          reduce using rule 9 (statement -> declare .)
    $end            reduce using rule 9 (statement -> declare .)
    LSTATE          reduce using rule 9 (statement -> declare .)
    RSTATE          reduce using rule 9 (statement -> declare .)


state 9

    (10) statement -> exprint .

    NEWLINE         reduce using rule 10 (statement -> exprint .)
    MINUS           reduce using rule 10 (statement -> exprint .)
    LPAREN          reduce using rule 10 (statement -> exprint .)
    WORD            reduce using rule 10 (statement -> exprint .)
    TYPE_A          reduce using rule 10 (statement -> exprint .)
    TEXT            reduce using rule 10 (statement -> exprint .)
    SO              reduce using rule 10 (statement -> exprint .)
    LOOP            reduce using rule 10 (statement -> exprint .)
    REPEAT          reduce using rule 10 (statement -> exprint .)
    NUM             reduce using rule 10 (statement -> exprint .)
    HEX             reduce using rule 10 (statement -> exprint .)
    TYPE_H          reduce using rule 10 (statement -> exprint .)
    TYPE_N          reduce using rule 10 (statement -> exprint .)
    TYPE_S          reduce using rule 10 (statement -> exprint .)
    $end            reduce using rule 10 (statement -> exprint .)
    LSTATE          reduce using rule 10 (statement -> exprint .)
    RSTATE          reduce using rule 10 (statement -> exprint .)


state 10

    (11) statement -> exif .
    (20) exelif -> exif . exelse
    (21) exelse -> . OTHERWISE LSTATE statement LSTATE OTHERWISE
    (22) exelse -> . OTHERWISE LSTATE NEWLINE statement RSTATE

    NEWLINE         reduce using rule 11 (statement -> exif .)
    MINUS           reduce using rule 11 (statement -> exif .)
    LPAREN          reduce using rule 11 (statement -> exif .)
    WORD            reduce using rule 11 (statement -> exif .)
    TYPE_A          reduce using rule 11 (statement -> exif .)
    TEXT            reduce using rule 11 (statement -> exif .)
    SO              reduce using rule 11 (statement -> exif .)
    LOOP            reduce using rule 11 (statement -> exif .)
    REPEAT          reduce using rule 11 (statement -> exif .)
    NUM             reduce using rule 11 (statement -> exif .)
    HEX             reduce using rule 11 (statement -> exif .)
    TYPE_H          reduce using rule 11 (statement -> exif .)
    TYPE_N          reduce using rule 11 (statement -> exif .)
    TYPE_S          reduce using rule 11 (statement -> exif .)
    $end            reduce using rule 11 (statement -> exif .)
    LSTATE          reduce using rule 11 (statement -> exif .)
    RSTATE          reduce using rule 11 (statement -> exif .)
    OTHERWISE       shift and go to state 46

    exelse                         shift and go to state 45

state 11

    (12) statement -> exelif .

    NEWLINE         reduce using rule 12 (statement -> exelif .)
    MINUS           reduce using rule 12 (statement -> exelif .)
    LPAREN          reduce using rule 12 (statement -> exelif .)
    WORD            reduce using rule 12 (statement -> exelif .)
    TYPE_A          reduce using rule 12 (statement -> exelif .)
    TEXT            reduce using rule 12 (statement -> exelif .)
    SO              reduce using rule 12 (statement -> exelif .)
    LOOP            reduce using rule 12 (statement -> exelif .)
    REPEAT          reduce using rule 12 (statement -> exelif .)
    NUM             reduce using rule 12 (statement -> exelif .)
    HEX             reduce using rule 12 (statement -> exelif .)
    TYPE_H          reduce using rule 12 (statement -> exelif .)
    TYPE_N          reduce using rule 12 (statement -> exelif .)
    TYPE_S          reduce using rule 12 (statement -> exelif .)
    $end            reduce using rule 12 (statement -> exelif .)
    LSTATE          reduce using rule 12 (statement -> exelif .)
    RSTATE          reduce using rule 12 (statement -> exelif .)


state 12

    (13) statement -> exloop .
    (17) statement -> exloop . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    MINUS           reduce using rule 13 (statement -> exloop .)
    LPAREN          reduce using rule 13 (statement -> exloop .)
    WORD            reduce using rule 13 (statement -> exloop .)
    TYPE_A          reduce using rule 13 (statement -> exloop .)
    TEXT            reduce using rule 13 (statement -> exloop .)
    SO              reduce using rule 13 (statement -> exloop .)
    LOOP            reduce using rule 13 (statement -> exloop .)
    REPEAT          reduce using rule 13 (statement -> exloop .)
    NUM             reduce using rule 13 (statement -> exloop .)
    HEX             reduce using rule 13 (statement -> exloop .)
    TYPE_H          reduce using rule 13 (statement -> exloop .)
    TYPE_N          reduce using rule 13 (statement -> exloop .)
    TYPE_S          reduce using rule 13 (statement -> exloop .)
    $end            reduce using rule 13 (statement -> exloop .)
    LSTATE          reduce using rule 13 (statement -> exloop .)
    RSTATE          reduce using rule 13 (statement -> exloop .)
    NEWLINE         shift and go to state 47

  ! NEWLINE         [ reduce using rule 13 (statement -> exloop .) ]


state 13

    (14) statement -> exrepeat .

    NEWLINE         reduce using rule 14 (statement -> exrepeat .)
    MINUS           reduce using rule 14 (statement -> exrepeat .)
    LPAREN          reduce using rule 14 (statement -> exrepeat .)
    WORD            reduce using rule 14 (statement -> exrepeat .)
    TYPE_A          reduce using rule 14 (statement -> exrepeat .)
    TEXT            reduce using rule 14 (statement -> exrepeat .)
    SO              reduce using rule 14 (statement -> exrepeat .)
    LOOP            reduce using rule 14 (statement -> exrepeat .)
    REPEAT          reduce using rule 14 (statement -> exrepeat .)
    NUM             reduce using rule 14 (statement -> exrepeat .)
    HEX             reduce using rule 14 (statement -> exrepeat .)
    TYPE_H          reduce using rule 14 (statement -> exrepeat .)
    TYPE_N          reduce using rule 14 (statement -> exrepeat .)
    TYPE_S          reduce using rule 14 (statement -> exrepeat .)
    $end            reduce using rule 14 (statement -> exrepeat .)
    LSTATE          reduce using rule 14 (statement -> exrepeat .)
    RSTATE          reduce using rule 14 (statement -> exrepeat .)


state 14

    (28) expression -> term . PLUS term
    (29) expression -> term . PLUS expression
    (31) expression -> term . MINUS term
    (32) expression -> term . MINUS expression
    (34) expression -> term . MUL term
    (35) expression -> term . MUL expression
    (37) expression -> term . DIV term
    (38) expression -> term . DIV expression
    (40) expression -> term . MOD term
    (41) expression -> term . MOD expression
    (50) expression -> term .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MUL             shift and go to state 50
    DIV             shift and go to state 51
    MOD             shift and go to state 52
    EQUTO           reduce using rule 50 (expression -> term .)
    NOEQU           reduce using rule 50 (expression -> term .)
    LESS            reduce using rule 50 (expression -> term .)
    MORE            reduce using rule 50 (expression -> term .)
    NEWLINE         reduce using rule 50 (expression -> term .)
    LPAREN          reduce using rule 50 (expression -> term .)
    WORD            reduce using rule 50 (expression -> term .)
    TYPE_A          reduce using rule 50 (expression -> term .)
    TEXT            reduce using rule 50 (expression -> term .)
    SO              reduce using rule 50 (expression -> term .)
    LOOP            reduce using rule 50 (expression -> term .)
    REPEAT          reduce using rule 50 (expression -> term .)
    NUM             reduce using rule 50 (expression -> term .)
    HEX             reduce using rule 50 (expression -> term .)
    TYPE_H          reduce using rule 50 (expression -> term .)
    TYPE_N          reduce using rule 50 (expression -> term .)
    TYPE_S          reduce using rule 50 (expression -> term .)
    $end            reduce using rule 50 (expression -> term .)
    RPAREN          reduce using rule 50 (expression -> term .)
    LSTATE          reduce using rule 50 (expression -> term .)
    RSTATE          reduce using rule 50 (expression -> term .)
    ,               reduce using rule 50 (expression -> term .)

  ! PLUS            [ reduce using rule 50 (expression -> term .) ]
  ! MINUS           [ reduce using rule 50 (expression -> term .) ]
  ! MUL             [ reduce using rule 50 (expression -> term .) ]
  ! DIV             [ reduce using rule 50 (expression -> term .) ]
  ! MOD             [ reduce using rule 50 (expression -> term .) ]


state 15

    (51) expression -> MINUS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 53
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 16

    (52) expression -> LPAREN . expression RPAREN
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 56
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 17

    (53) exassign -> WORD . EQU expression
    (42) term -> WORD .
    (61) arraysh -> WORD . LARRY NUM RARRY
    (62) arraysh -> WORD . LARRY WORD RARRY

    EQU             shift and go to state 57
    PLUS            reduce using rule 42 (term -> WORD .)
    MINUS           reduce using rule 42 (term -> WORD .)
    MUL             reduce using rule 42 (term -> WORD .)
    DIV             reduce using rule 42 (term -> WORD .)
    MOD             reduce using rule 42 (term -> WORD .)
    EQUTO           reduce using rule 42 (term -> WORD .)
    NOEQU           reduce using rule 42 (term -> WORD .)
    LESS            reduce using rule 42 (term -> WORD .)
    MORE            reduce using rule 42 (term -> WORD .)
    NEWLINE         reduce using rule 42 (term -> WORD .)
    LPAREN          reduce using rule 42 (term -> WORD .)
    WORD            reduce using rule 42 (term -> WORD .)
    TYPE_A          reduce using rule 42 (term -> WORD .)
    TEXT            reduce using rule 42 (term -> WORD .)
    SO              reduce using rule 42 (term -> WORD .)
    LOOP            reduce using rule 42 (term -> WORD .)
    REPEAT          reduce using rule 42 (term -> WORD .)
    NUM             reduce using rule 42 (term -> WORD .)
    HEX             reduce using rule 42 (term -> WORD .)
    TYPE_H          reduce using rule 42 (term -> WORD .)
    TYPE_N          reduce using rule 42 (term -> WORD .)
    TYPE_S          reduce using rule 42 (term -> WORD .)
    $end            reduce using rule 42 (term -> WORD .)
    LARRY           shift and go to state 58


state 18

    (54) exassign -> arraysh . EQU expression
    (43) term -> arraysh .

    EQU             shift and go to state 59
    PLUS            reduce using rule 43 (term -> arraysh .)
    MINUS           reduce using rule 43 (term -> arraysh .)
    MUL             reduce using rule 43 (term -> arraysh .)
    DIV             reduce using rule 43 (term -> arraysh .)
    MOD             reduce using rule 43 (term -> arraysh .)
    EQUTO           reduce using rule 43 (term -> arraysh .)
    NOEQU           reduce using rule 43 (term -> arraysh .)
    LESS            reduce using rule 43 (term -> arraysh .)
    MORE            reduce using rule 43 (term -> arraysh .)
    NEWLINE         reduce using rule 43 (term -> arraysh .)
    LPAREN          reduce using rule 43 (term -> arraysh .)
    WORD            reduce using rule 43 (term -> arraysh .)
    TYPE_A          reduce using rule 43 (term -> arraysh .)
    TEXT            reduce using rule 43 (term -> arraysh .)
    SO              reduce using rule 43 (term -> arraysh .)
    LOOP            reduce using rule 43 (term -> arraysh .)
    REPEAT          reduce using rule 43 (term -> arraysh .)
    NUM             reduce using rule 43 (term -> arraysh .)
    HEX             reduce using rule 43 (term -> arraysh .)
    TYPE_H          reduce using rule 43 (term -> arraysh .)
    TYPE_N          reduce using rule 43 (term -> arraysh .)
    TYPE_S          reduce using rule 43 (term -> arraysh .)
    $end            reduce using rule 43 (term -> arraysh .)


state 19

    (59) declare -> typeconst . WORD
    (60) declare -> typeconst . WORD EQU term

    WORD            shift and go to state 60


state 20

    (63) declare -> TYPE_A . WORD EQU LSTATE arrayX RSTATE
    (64) declare -> TYPE_A . WORD LARRY NUM RARRY
    (65) declare -> TYPE_A . WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (48) typeconst -> TYPE_A .

  ! shift/reduce conflict for WORD resolved as shift
    WORD            shift and go to state 61

  ! WORD            [ reduce using rule 48 (typeconst -> TYPE_A .) ]


state 21

    (44) term -> NUM .

    PLUS            reduce using rule 44 (term -> NUM .)
    MINUS           reduce using rule 44 (term -> NUM .)
    MUL             reduce using rule 44 (term -> NUM .)
    DIV             reduce using rule 44 (term -> NUM .)
    MOD             reduce using rule 44 (term -> NUM .)
    EQUTO           reduce using rule 44 (term -> NUM .)
    NOEQU           reduce using rule 44 (term -> NUM .)
    LESS            reduce using rule 44 (term -> NUM .)
    MORE            reduce using rule 44 (term -> NUM .)
    NEWLINE         reduce using rule 44 (term -> NUM .)
    LPAREN          reduce using rule 44 (term -> NUM .)
    WORD            reduce using rule 44 (term -> NUM .)
    TYPE_A          reduce using rule 44 (term -> NUM .)
    TEXT            reduce using rule 44 (term -> NUM .)
    SO              reduce using rule 44 (term -> NUM .)
    LOOP            reduce using rule 44 (term -> NUM .)
    REPEAT          reduce using rule 44 (term -> NUM .)
    NUM             reduce using rule 44 (term -> NUM .)
    HEX             reduce using rule 44 (term -> NUM .)
    TYPE_H          reduce using rule 44 (term -> NUM .)
    TYPE_N          reduce using rule 44 (term -> NUM .)
    TYPE_S          reduce using rule 44 (term -> NUM .)
    $end            reduce using rule 44 (term -> NUM .)
    RPAREN          reduce using rule 44 (term -> NUM .)
    LSTATE          reduce using rule 44 (term -> NUM .)
    RSTATE          reduce using rule 44 (term -> NUM .)
    ,               reduce using rule 44 (term -> NUM .)


state 22

    (69) exprint -> TEXT . LPAREN WORD printMore RPAREN

    LPAREN          shift and go to state 62


state 23

    (18) exif -> SO . LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> SO . LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE

    LPAREN          shift and go to state 63


state 24

    (23) exloop -> LOOP . LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> LOOP . LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE

    LPAREN          shift and go to state 64


state 25

    (25) exrepeat -> REPEAT . LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> REPEAT . LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE

    LPAREN          shift and go to state 65


state 26

    (45) term -> HEX .

    PLUS            reduce using rule 45 (term -> HEX .)
    MINUS           reduce using rule 45 (term -> HEX .)
    MUL             reduce using rule 45 (term -> HEX .)
    DIV             reduce using rule 45 (term -> HEX .)
    MOD             reduce using rule 45 (term -> HEX .)
    EQUTO           reduce using rule 45 (term -> HEX .)
    NOEQU           reduce using rule 45 (term -> HEX .)
    LESS            reduce using rule 45 (term -> HEX .)
    MORE            reduce using rule 45 (term -> HEX .)
    NEWLINE         reduce using rule 45 (term -> HEX .)
    LPAREN          reduce using rule 45 (term -> HEX .)
    WORD            reduce using rule 45 (term -> HEX .)
    TYPE_A          reduce using rule 45 (term -> HEX .)
    TEXT            reduce using rule 45 (term -> HEX .)
    SO              reduce using rule 45 (term -> HEX .)
    LOOP            reduce using rule 45 (term -> HEX .)
    REPEAT          reduce using rule 45 (term -> HEX .)
    NUM             reduce using rule 45 (term -> HEX .)
    HEX             reduce using rule 45 (term -> HEX .)
    TYPE_H          reduce using rule 45 (term -> HEX .)
    TYPE_N          reduce using rule 45 (term -> HEX .)
    TYPE_S          reduce using rule 45 (term -> HEX .)
    $end            reduce using rule 45 (term -> HEX .)
    RPAREN          reduce using rule 45 (term -> HEX .)
    LSTATE          reduce using rule 45 (term -> HEX .)
    RSTATE          reduce using rule 45 (term -> HEX .)
    ,               reduce using rule 45 (term -> HEX .)


state 27

    (46) typeconst -> TYPE_H .

    WORD            reduce using rule 46 (typeconst -> TYPE_H .)


state 28

    (47) typeconst -> TYPE_N .

    WORD            reduce using rule 47 (typeconst -> TYPE_N .)


state 29

    (49) typeconst -> TYPE_S .

    WORD            reduce using rule 49 (typeconst -> TYPE_S .)


state 30

    (1) line -> Input line .

    $end            reduce using rule 1 (line -> Input line .)


state 31

    (2) line -> EXIT empty .

    $end            reduce using rule 2 (line -> EXIT empty .)


state 32

    (6) statement -> statement NEWLINE . statement
    (7) statement -> statement NEWLINE . statement NEWLINE
    (15) statement -> statement NEWLINE .
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for TYPE_A resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SO resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for TYPE_H resolved as shift
  ! shift/reduce conflict for TYPE_N resolved as shift
  ! shift/reduce conflict for TYPE_S resolved as shift
    MINUS           reduce using rule 15 (statement -> statement NEWLINE .)
    LPAREN          reduce using rule 15 (statement -> statement NEWLINE .)
    NUM             reduce using rule 15 (statement -> statement NEWLINE .)
    HEX             reduce using rule 15 (statement -> statement NEWLINE .)
    $end            reduce using rule 15 (statement -> statement NEWLINE .)
    LSTATE          reduce using rule 15 (statement -> statement NEWLINE .)
    RSTATE          reduce using rule 15 (statement -> statement NEWLINE .)
    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

  ! NEWLINE         [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! WORD            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_A          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TEXT            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! SO              [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! LOOP            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! REPEAT          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_H          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_N          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_S          [ reduce using rule 15 (statement -> statement NEWLINE .) ]

    statement                      shift and go to state 66
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 33

    (27) expression -> expression PLUS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 67
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 34

    (30) expression -> expression MINUS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 68
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 35

    (33) expression -> expression MUL . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 69
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 36

    (36) expression -> expression DIV . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 70
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 37

    (39) expression -> expression MOD . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 71
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 38

    (55) expression -> expression EQUTO . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 72
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 39

    (56) expression -> expression NOEQU . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 73
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 40

    (57) expression -> expression LESS . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 74
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 41

    (58) expression -> expression MORE . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 75
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 42

    (16) statement -> NEWLINE statement .
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    MINUS           reduce using rule 16 (statement -> NEWLINE statement .)
    LPAREN          reduce using rule 16 (statement -> NEWLINE statement .)
    WORD            reduce using rule 16 (statement -> NEWLINE statement .)
    TYPE_A          reduce using rule 16 (statement -> NEWLINE statement .)
    TEXT            reduce using rule 16 (statement -> NEWLINE statement .)
    SO              reduce using rule 16 (statement -> NEWLINE statement .)
    LOOP            reduce using rule 16 (statement -> NEWLINE statement .)
    REPEAT          reduce using rule 16 (statement -> NEWLINE statement .)
    NUM             reduce using rule 16 (statement -> NEWLINE statement .)
    HEX             reduce using rule 16 (statement -> NEWLINE statement .)
    TYPE_H          reduce using rule 16 (statement -> NEWLINE statement .)
    TYPE_N          reduce using rule 16 (statement -> NEWLINE statement .)
    TYPE_S          reduce using rule 16 (statement -> NEWLINE statement .)
    $end            reduce using rule 16 (statement -> NEWLINE statement .)
    LSTATE          reduce using rule 16 (statement -> NEWLINE statement .)
    RSTATE          reduce using rule 16 (statement -> NEWLINE statement .)
    NEWLINE         shift and go to state 32

  ! NEWLINE         [ reduce using rule 16 (statement -> NEWLINE statement .) ]


state 43

    (53) exassign -> WORD . EQU expression
    (61) arraysh -> WORD . LARRY NUM RARRY
    (62) arraysh -> WORD . LARRY WORD RARRY

    EQU             shift and go to state 57
    LARRY           shift and go to state 58


state 44

    (54) exassign -> arraysh . EQU expression

    EQU             shift and go to state 59


state 45

    (20) exelif -> exif exelse .

    NEWLINE         reduce using rule 20 (exelif -> exif exelse .)
    MINUS           reduce using rule 20 (exelif -> exif exelse .)
    LPAREN          reduce using rule 20 (exelif -> exif exelse .)
    WORD            reduce using rule 20 (exelif -> exif exelse .)
    TYPE_A          reduce using rule 20 (exelif -> exif exelse .)
    TEXT            reduce using rule 20 (exelif -> exif exelse .)
    SO              reduce using rule 20 (exelif -> exif exelse .)
    LOOP            reduce using rule 20 (exelif -> exif exelse .)
    REPEAT          reduce using rule 20 (exelif -> exif exelse .)
    NUM             reduce using rule 20 (exelif -> exif exelse .)
    HEX             reduce using rule 20 (exelif -> exif exelse .)
    TYPE_H          reduce using rule 20 (exelif -> exif exelse .)
    TYPE_N          reduce using rule 20 (exelif -> exif exelse .)
    TYPE_S          reduce using rule 20 (exelif -> exif exelse .)
    $end            reduce using rule 20 (exelif -> exif exelse .)
    LSTATE          reduce using rule 20 (exelif -> exif exelse .)
    RSTATE          reduce using rule 20 (exelif -> exif exelse .)


state 46

    (21) exelse -> OTHERWISE . LSTATE statement LSTATE OTHERWISE
    (22) exelse -> OTHERWISE . LSTATE NEWLINE statement RSTATE

    LSTATE          shift and go to state 76


state 47

    (17) statement -> exloop NEWLINE .

    NEWLINE         reduce using rule 17 (statement -> exloop NEWLINE .)
    MINUS           reduce using rule 17 (statement -> exloop NEWLINE .)
    LPAREN          reduce using rule 17 (statement -> exloop NEWLINE .)
    WORD            reduce using rule 17 (statement -> exloop NEWLINE .)
    TYPE_A          reduce using rule 17 (statement -> exloop NEWLINE .)
    TEXT            reduce using rule 17 (statement -> exloop NEWLINE .)
    SO              reduce using rule 17 (statement -> exloop NEWLINE .)
    LOOP            reduce using rule 17 (statement -> exloop NEWLINE .)
    REPEAT          reduce using rule 17 (statement -> exloop NEWLINE .)
    NUM             reduce using rule 17 (statement -> exloop NEWLINE .)
    HEX             reduce using rule 17 (statement -> exloop NEWLINE .)
    TYPE_H          reduce using rule 17 (statement -> exloop NEWLINE .)
    TYPE_N          reduce using rule 17 (statement -> exloop NEWLINE .)
    TYPE_S          reduce using rule 17 (statement -> exloop NEWLINE .)
    $end            reduce using rule 17 (statement -> exloop NEWLINE .)
    LSTATE          reduce using rule 17 (statement -> exloop NEWLINE .)
    RSTATE          reduce using rule 17 (statement -> exloop NEWLINE .)


state 48

    (28) expression -> term PLUS . term
    (29) expression -> term PLUS . expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 77
    expression                     shift and go to state 78
    arraysh                        shift and go to state 55

state 49

    (31) expression -> term MINUS . term
    (32) expression -> term MINUS . expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 79
    expression                     shift and go to state 80
    arraysh                        shift and go to state 55

state 50

    (34) expression -> term MUL . term
    (35) expression -> term MUL . expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 81
    expression                     shift and go to state 82
    arraysh                        shift and go to state 55

state 51

    (37) expression -> term DIV . term
    (38) expression -> term DIV . expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 83
    expression                     shift and go to state 84
    arraysh                        shift and go to state 55

state 52

    (40) expression -> term MOD . term
    (41) expression -> term MOD . expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26
    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16

    term                           shift and go to state 85
    expression                     shift and go to state 86
    arraysh                        shift and go to state 55

state 53

    (51) expression -> MINUS expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 51 (expression -> MINUS expression .)
    MINUS           reduce using rule 51 (expression -> MINUS expression .)
    EQUTO           reduce using rule 51 (expression -> MINUS expression .)
    NOEQU           reduce using rule 51 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 51 (expression -> MINUS expression .)
    LPAREN          reduce using rule 51 (expression -> MINUS expression .)
    WORD            reduce using rule 51 (expression -> MINUS expression .)
    TYPE_A          reduce using rule 51 (expression -> MINUS expression .)
    TEXT            reduce using rule 51 (expression -> MINUS expression .)
    SO              reduce using rule 51 (expression -> MINUS expression .)
    LOOP            reduce using rule 51 (expression -> MINUS expression .)
    REPEAT          reduce using rule 51 (expression -> MINUS expression .)
    NUM             reduce using rule 51 (expression -> MINUS expression .)
    HEX             reduce using rule 51 (expression -> MINUS expression .)
    TYPE_H          reduce using rule 51 (expression -> MINUS expression .)
    TYPE_N          reduce using rule 51 (expression -> MINUS expression .)
    TYPE_S          reduce using rule 51 (expression -> MINUS expression .)
    $end            reduce using rule 51 (expression -> MINUS expression .)
    RPAREN          reduce using rule 51 (expression -> MINUS expression .)
    LSTATE          reduce using rule 51 (expression -> MINUS expression .)
    RSTATE          reduce using rule 51 (expression -> MINUS expression .)
    ,               reduce using rule 51 (expression -> MINUS expression .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MUL             [ reduce using rule 51 (expression -> MINUS expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> MINUS expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 51 (expression -> MINUS expression .) ]
  ! MORE            [ reduce using rule 51 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 54

    (42) term -> WORD .
    (61) arraysh -> WORD . LARRY NUM RARRY
    (62) arraysh -> WORD . LARRY WORD RARRY

    PLUS            reduce using rule 42 (term -> WORD .)
    MINUS           reduce using rule 42 (term -> WORD .)
    MUL             reduce using rule 42 (term -> WORD .)
    DIV             reduce using rule 42 (term -> WORD .)
    MOD             reduce using rule 42 (term -> WORD .)
    EQUTO           reduce using rule 42 (term -> WORD .)
    NOEQU           reduce using rule 42 (term -> WORD .)
    LESS            reduce using rule 42 (term -> WORD .)
    MORE            reduce using rule 42 (term -> WORD .)
    NEWLINE         reduce using rule 42 (term -> WORD .)
    LPAREN          reduce using rule 42 (term -> WORD .)
    WORD            reduce using rule 42 (term -> WORD .)
    TYPE_A          reduce using rule 42 (term -> WORD .)
    TEXT            reduce using rule 42 (term -> WORD .)
    SO              reduce using rule 42 (term -> WORD .)
    LOOP            reduce using rule 42 (term -> WORD .)
    REPEAT          reduce using rule 42 (term -> WORD .)
    NUM             reduce using rule 42 (term -> WORD .)
    HEX             reduce using rule 42 (term -> WORD .)
    TYPE_H          reduce using rule 42 (term -> WORD .)
    TYPE_N          reduce using rule 42 (term -> WORD .)
    TYPE_S          reduce using rule 42 (term -> WORD .)
    $end            reduce using rule 42 (term -> WORD .)
    RPAREN          reduce using rule 42 (term -> WORD .)
    LSTATE          reduce using rule 42 (term -> WORD .)
    RSTATE          reduce using rule 42 (term -> WORD .)
    ,               reduce using rule 42 (term -> WORD .)
    LARRY           shift and go to state 58


state 55

    (43) term -> arraysh .

    PLUS            reduce using rule 43 (term -> arraysh .)
    MINUS           reduce using rule 43 (term -> arraysh .)
    MUL             reduce using rule 43 (term -> arraysh .)
    DIV             reduce using rule 43 (term -> arraysh .)
    MOD             reduce using rule 43 (term -> arraysh .)
    EQUTO           reduce using rule 43 (term -> arraysh .)
    NOEQU           reduce using rule 43 (term -> arraysh .)
    LESS            reduce using rule 43 (term -> arraysh .)
    MORE            reduce using rule 43 (term -> arraysh .)
    NEWLINE         reduce using rule 43 (term -> arraysh .)
    LPAREN          reduce using rule 43 (term -> arraysh .)
    WORD            reduce using rule 43 (term -> arraysh .)
    TYPE_A          reduce using rule 43 (term -> arraysh .)
    TEXT            reduce using rule 43 (term -> arraysh .)
    SO              reduce using rule 43 (term -> arraysh .)
    LOOP            reduce using rule 43 (term -> arraysh .)
    REPEAT          reduce using rule 43 (term -> arraysh .)
    NUM             reduce using rule 43 (term -> arraysh .)
    HEX             reduce using rule 43 (term -> arraysh .)
    TYPE_H          reduce using rule 43 (term -> arraysh .)
    TYPE_N          reduce using rule 43 (term -> arraysh .)
    TYPE_S          reduce using rule 43 (term -> arraysh .)
    $end            reduce using rule 43 (term -> arraysh .)
    RPAREN          reduce using rule 43 (term -> arraysh .)
    LSTATE          reduce using rule 43 (term -> arraysh .)
    RSTATE          reduce using rule 43 (term -> arraysh .)
    ,               reduce using rule 43 (term -> arraysh .)


state 56

    (52) expression -> LPAREN expression . RPAREN
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    RPAREN          shift and go to state 87
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41


state 57

    (53) exassign -> WORD EQU . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 88
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 58

    (61) arraysh -> WORD LARRY . NUM RARRY
    (62) arraysh -> WORD LARRY . WORD RARRY

    NUM             shift and go to state 90
    WORD            shift and go to state 89


state 59

    (54) exassign -> arraysh EQU . expression
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    arraysh                        shift and go to state 55
    expression                     shift and go to state 91
    term                           shift and go to state 14

state 60

    (59) declare -> typeconst WORD .
    (60) declare -> typeconst WORD . EQU term

    NEWLINE         reduce using rule 59 (declare -> typeconst WORD .)
    MINUS           reduce using rule 59 (declare -> typeconst WORD .)
    LPAREN          reduce using rule 59 (declare -> typeconst WORD .)
    WORD            reduce using rule 59 (declare -> typeconst WORD .)
    TYPE_A          reduce using rule 59 (declare -> typeconst WORD .)
    TEXT            reduce using rule 59 (declare -> typeconst WORD .)
    SO              reduce using rule 59 (declare -> typeconst WORD .)
    LOOP            reduce using rule 59 (declare -> typeconst WORD .)
    REPEAT          reduce using rule 59 (declare -> typeconst WORD .)
    NUM             reduce using rule 59 (declare -> typeconst WORD .)
    HEX             reduce using rule 59 (declare -> typeconst WORD .)
    TYPE_H          reduce using rule 59 (declare -> typeconst WORD .)
    TYPE_N          reduce using rule 59 (declare -> typeconst WORD .)
    TYPE_S          reduce using rule 59 (declare -> typeconst WORD .)
    $end            reduce using rule 59 (declare -> typeconst WORD .)
    LSTATE          reduce using rule 59 (declare -> typeconst WORD .)
    RSTATE          reduce using rule 59 (declare -> typeconst WORD .)
    EQU             shift and go to state 92


state 61

    (63) declare -> TYPE_A WORD . EQU LSTATE arrayX RSTATE
    (64) declare -> TYPE_A WORD . LARRY NUM RARRY
    (65) declare -> TYPE_A WORD . LARRY NUM RARRY EQU LSTATE arrayX RSTATE

    EQU             shift and go to state 93
    LARRY           shift and go to state 94


state 62

    (69) exprint -> TEXT LPAREN . WORD printMore RPAREN

    WORD            shift and go to state 95


state 63

    (18) exif -> SO LPAREN . expression RPAREN LSTATE statement RSTATE
    (19) exif -> SO LPAREN . expression RPAREN NEWLINE LSTATE statement RSTATE
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 96
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 64

    (23) exloop -> LOOP LPAREN . expression RPAREN LSTATE statement RSTATE
    (24) exloop -> LOOP LPAREN . expression RPAREN LSTATE NEWLINE statement RSTATE
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 97
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 65

    (25) exrepeat -> REPEAT LPAREN . expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> REPEAT LPAREN . expression RPAREN NEWLINE LSTATE statement RSTATE
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 98
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 66

    (6) statement -> statement NEWLINE statement .
    (7) statement -> statement NEWLINE statement . NEWLINE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    MINUS           reduce using rule 6 (statement -> statement NEWLINE statement .)
    LPAREN          reduce using rule 6 (statement -> statement NEWLINE statement .)
    WORD            reduce using rule 6 (statement -> statement NEWLINE statement .)
    TYPE_A          reduce using rule 6 (statement -> statement NEWLINE statement .)
    TEXT            reduce using rule 6 (statement -> statement NEWLINE statement .)
    SO              reduce using rule 6 (statement -> statement NEWLINE statement .)
    LOOP            reduce using rule 6 (statement -> statement NEWLINE statement .)
    REPEAT          reduce using rule 6 (statement -> statement NEWLINE statement .)
    NUM             reduce using rule 6 (statement -> statement NEWLINE statement .)
    HEX             reduce using rule 6 (statement -> statement NEWLINE statement .)
    TYPE_H          reduce using rule 6 (statement -> statement NEWLINE statement .)
    TYPE_N          reduce using rule 6 (statement -> statement NEWLINE statement .)
    TYPE_S          reduce using rule 6 (statement -> statement NEWLINE statement .)
    $end            reduce using rule 6 (statement -> statement NEWLINE statement .)
    LSTATE          reduce using rule 6 (statement -> statement NEWLINE statement .)
    RSTATE          reduce using rule 6 (statement -> statement NEWLINE statement .)
    NEWLINE         shift and go to state 99

  ! NEWLINE         [ reduce using rule 6 (statement -> statement NEWLINE statement .) ]


state 67

    (27) expression -> expression PLUS expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 27 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 27 (expression -> expression PLUS expression .)
    EQUTO           reduce using rule 27 (expression -> expression PLUS expression .)
    NOEQU           reduce using rule 27 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 27 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 27 (expression -> expression PLUS expression .)
    WORD            reduce using rule 27 (expression -> expression PLUS expression .)
    TYPE_A          reduce using rule 27 (expression -> expression PLUS expression .)
    TEXT            reduce using rule 27 (expression -> expression PLUS expression .)
    SO              reduce using rule 27 (expression -> expression PLUS expression .)
    LOOP            reduce using rule 27 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 27 (expression -> expression PLUS expression .)
    NUM             reduce using rule 27 (expression -> expression PLUS expression .)
    HEX             reduce using rule 27 (expression -> expression PLUS expression .)
    TYPE_H          reduce using rule 27 (expression -> expression PLUS expression .)
    TYPE_N          reduce using rule 27 (expression -> expression PLUS expression .)
    TYPE_S          reduce using rule 27 (expression -> expression PLUS expression .)
    $end            reduce using rule 27 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 27 (expression -> expression PLUS expression .)
    LSTATE          reduce using rule 27 (expression -> expression PLUS expression .)
    RSTATE          reduce using rule 27 (expression -> expression PLUS expression .)
    ,               reduce using rule 27 (expression -> expression PLUS expression .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MUL             [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! MORE            [ reduce using rule 27 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 68

    (30) expression -> expression MINUS expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 30 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 30 (expression -> expression MINUS expression .)
    EQUTO           reduce using rule 30 (expression -> expression MINUS expression .)
    NOEQU           reduce using rule 30 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 30 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 30 (expression -> expression MINUS expression .)
    WORD            reduce using rule 30 (expression -> expression MINUS expression .)
    TYPE_A          reduce using rule 30 (expression -> expression MINUS expression .)
    TEXT            reduce using rule 30 (expression -> expression MINUS expression .)
    SO              reduce using rule 30 (expression -> expression MINUS expression .)
    LOOP            reduce using rule 30 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 30 (expression -> expression MINUS expression .)
    NUM             reduce using rule 30 (expression -> expression MINUS expression .)
    HEX             reduce using rule 30 (expression -> expression MINUS expression .)
    TYPE_H          reduce using rule 30 (expression -> expression MINUS expression .)
    TYPE_N          reduce using rule 30 (expression -> expression MINUS expression .)
    TYPE_S          reduce using rule 30 (expression -> expression MINUS expression .)
    $end            reduce using rule 30 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 30 (expression -> expression MINUS expression .)
    LSTATE          reduce using rule 30 (expression -> expression MINUS expression .)
    RSTATE          reduce using rule 30 (expression -> expression MINUS expression .)
    ,               reduce using rule 30 (expression -> expression MINUS expression .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MUL             [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! MORE            [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 69

    (33) expression -> expression MUL expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 33 (expression -> expression MUL expression .)
    MINUS           reduce using rule 33 (expression -> expression MUL expression .)
    MUL             reduce using rule 33 (expression -> expression MUL expression .)
    DIV             reduce using rule 33 (expression -> expression MUL expression .)
    MOD             reduce using rule 33 (expression -> expression MUL expression .)
    EQUTO           reduce using rule 33 (expression -> expression MUL expression .)
    NOEQU           reduce using rule 33 (expression -> expression MUL expression .)
    NEWLINE         reduce using rule 33 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 33 (expression -> expression MUL expression .)
    WORD            reduce using rule 33 (expression -> expression MUL expression .)
    TYPE_A          reduce using rule 33 (expression -> expression MUL expression .)
    TEXT            reduce using rule 33 (expression -> expression MUL expression .)
    SO              reduce using rule 33 (expression -> expression MUL expression .)
    LOOP            reduce using rule 33 (expression -> expression MUL expression .)
    REPEAT          reduce using rule 33 (expression -> expression MUL expression .)
    NUM             reduce using rule 33 (expression -> expression MUL expression .)
    HEX             reduce using rule 33 (expression -> expression MUL expression .)
    TYPE_H          reduce using rule 33 (expression -> expression MUL expression .)
    TYPE_N          reduce using rule 33 (expression -> expression MUL expression .)
    TYPE_S          reduce using rule 33 (expression -> expression MUL expression .)
    $end            reduce using rule 33 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 33 (expression -> expression MUL expression .)
    LSTATE          reduce using rule 33 (expression -> expression MUL expression .)
    RSTATE          reduce using rule 33 (expression -> expression MUL expression .)
    ,               reduce using rule 33 (expression -> expression MUL expression .)
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! LESS            [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! MORE            [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 70

    (36) expression -> expression DIV expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 36 (expression -> expression DIV expression .)
    MINUS           reduce using rule 36 (expression -> expression DIV expression .)
    MUL             reduce using rule 36 (expression -> expression DIV expression .)
    DIV             reduce using rule 36 (expression -> expression DIV expression .)
    MOD             reduce using rule 36 (expression -> expression DIV expression .)
    EQUTO           reduce using rule 36 (expression -> expression DIV expression .)
    NOEQU           reduce using rule 36 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 36 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 36 (expression -> expression DIV expression .)
    WORD            reduce using rule 36 (expression -> expression DIV expression .)
    TYPE_A          reduce using rule 36 (expression -> expression DIV expression .)
    TEXT            reduce using rule 36 (expression -> expression DIV expression .)
    SO              reduce using rule 36 (expression -> expression DIV expression .)
    LOOP            reduce using rule 36 (expression -> expression DIV expression .)
    REPEAT          reduce using rule 36 (expression -> expression DIV expression .)
    NUM             reduce using rule 36 (expression -> expression DIV expression .)
    HEX             reduce using rule 36 (expression -> expression DIV expression .)
    TYPE_H          reduce using rule 36 (expression -> expression DIV expression .)
    TYPE_N          reduce using rule 36 (expression -> expression DIV expression .)
    TYPE_S          reduce using rule 36 (expression -> expression DIV expression .)
    $end            reduce using rule 36 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 36 (expression -> expression DIV expression .)
    LSTATE          reduce using rule 36 (expression -> expression DIV expression .)
    RSTATE          reduce using rule 36 (expression -> expression DIV expression .)
    ,               reduce using rule 36 (expression -> expression DIV expression .)
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! LESS            [ reduce using rule 36 (expression -> expression DIV expression .) ]
  ! MORE            [ reduce using rule 36 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 71

    (39) expression -> expression MOD expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 39 (expression -> expression MOD expression .)
    MINUS           reduce using rule 39 (expression -> expression MOD expression .)
    MUL             reduce using rule 39 (expression -> expression MOD expression .)
    DIV             reduce using rule 39 (expression -> expression MOD expression .)
    MOD             reduce using rule 39 (expression -> expression MOD expression .)
    EQUTO           reduce using rule 39 (expression -> expression MOD expression .)
    NOEQU           reduce using rule 39 (expression -> expression MOD expression .)
    NEWLINE         reduce using rule 39 (expression -> expression MOD expression .)
    LPAREN          reduce using rule 39 (expression -> expression MOD expression .)
    WORD            reduce using rule 39 (expression -> expression MOD expression .)
    TYPE_A          reduce using rule 39 (expression -> expression MOD expression .)
    TEXT            reduce using rule 39 (expression -> expression MOD expression .)
    SO              reduce using rule 39 (expression -> expression MOD expression .)
    LOOP            reduce using rule 39 (expression -> expression MOD expression .)
    REPEAT          reduce using rule 39 (expression -> expression MOD expression .)
    NUM             reduce using rule 39 (expression -> expression MOD expression .)
    HEX             reduce using rule 39 (expression -> expression MOD expression .)
    TYPE_H          reduce using rule 39 (expression -> expression MOD expression .)
    TYPE_N          reduce using rule 39 (expression -> expression MOD expression .)
    TYPE_S          reduce using rule 39 (expression -> expression MOD expression .)
    $end            reduce using rule 39 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 39 (expression -> expression MOD expression .)
    LSTATE          reduce using rule 39 (expression -> expression MOD expression .)
    RSTATE          reduce using rule 39 (expression -> expression MOD expression .)
    ,               reduce using rule 39 (expression -> expression MOD expression .)
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! LESS            [ reduce using rule 39 (expression -> expression MOD expression .) ]
  ! MORE            [ reduce using rule 39 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 72

    (55) expression -> expression EQUTO expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUTO resolved as shift
  ! shift/reduce conflict for NOEQU resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    NEWLINE         reduce using rule 55 (expression -> expression EQUTO expression .)
    LPAREN          reduce using rule 55 (expression -> expression EQUTO expression .)
    WORD            reduce using rule 55 (expression -> expression EQUTO expression .)
    TYPE_A          reduce using rule 55 (expression -> expression EQUTO expression .)
    TEXT            reduce using rule 55 (expression -> expression EQUTO expression .)
    SO              reduce using rule 55 (expression -> expression EQUTO expression .)
    LOOP            reduce using rule 55 (expression -> expression EQUTO expression .)
    REPEAT          reduce using rule 55 (expression -> expression EQUTO expression .)
    NUM             reduce using rule 55 (expression -> expression EQUTO expression .)
    HEX             reduce using rule 55 (expression -> expression EQUTO expression .)
    TYPE_H          reduce using rule 55 (expression -> expression EQUTO expression .)
    TYPE_N          reduce using rule 55 (expression -> expression EQUTO expression .)
    TYPE_S          reduce using rule 55 (expression -> expression EQUTO expression .)
    $end            reduce using rule 55 (expression -> expression EQUTO expression .)
    RPAREN          reduce using rule 55 (expression -> expression EQUTO expression .)
    LSTATE          reduce using rule 55 (expression -> expression EQUTO expression .)
    RSTATE          reduce using rule 55 (expression -> expression EQUTO expression .)
    ,               reduce using rule 55 (expression -> expression EQUTO expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! PLUS            [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! MUL             [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! EQUTO           [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! NOEQU           [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! LESS            [ reduce using rule 55 (expression -> expression EQUTO expression .) ]
  ! MORE            [ reduce using rule 55 (expression -> expression EQUTO expression .) ]


state 73

    (56) expression -> expression NOEQU expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUTO resolved as shift
  ! shift/reduce conflict for NOEQU resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    NEWLINE         reduce using rule 56 (expression -> expression NOEQU expression .)
    LPAREN          reduce using rule 56 (expression -> expression NOEQU expression .)
    WORD            reduce using rule 56 (expression -> expression NOEQU expression .)
    TYPE_A          reduce using rule 56 (expression -> expression NOEQU expression .)
    TEXT            reduce using rule 56 (expression -> expression NOEQU expression .)
    SO              reduce using rule 56 (expression -> expression NOEQU expression .)
    LOOP            reduce using rule 56 (expression -> expression NOEQU expression .)
    REPEAT          reduce using rule 56 (expression -> expression NOEQU expression .)
    NUM             reduce using rule 56 (expression -> expression NOEQU expression .)
    HEX             reduce using rule 56 (expression -> expression NOEQU expression .)
    TYPE_H          reduce using rule 56 (expression -> expression NOEQU expression .)
    TYPE_N          reduce using rule 56 (expression -> expression NOEQU expression .)
    TYPE_S          reduce using rule 56 (expression -> expression NOEQU expression .)
    $end            reduce using rule 56 (expression -> expression NOEQU expression .)
    RPAREN          reduce using rule 56 (expression -> expression NOEQU expression .)
    LSTATE          reduce using rule 56 (expression -> expression NOEQU expression .)
    RSTATE          reduce using rule 56 (expression -> expression NOEQU expression .)
    ,               reduce using rule 56 (expression -> expression NOEQU expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! PLUS            [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! MUL             [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! EQUTO           [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! NOEQU           [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! LESS            [ reduce using rule 56 (expression -> expression NOEQU expression .) ]
  ! MORE            [ reduce using rule 56 (expression -> expression NOEQU expression .) ]


state 74

    (57) expression -> expression LESS expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 57 (expression -> expression LESS expression .)
    MINUS           reduce using rule 57 (expression -> expression LESS expression .)
    MUL             reduce using rule 57 (expression -> expression LESS expression .)
    DIV             reduce using rule 57 (expression -> expression LESS expression .)
    MOD             reduce using rule 57 (expression -> expression LESS expression .)
    EQUTO           reduce using rule 57 (expression -> expression LESS expression .)
    NOEQU           reduce using rule 57 (expression -> expression LESS expression .)
    LESS            reduce using rule 57 (expression -> expression LESS expression .)
    MORE            reduce using rule 57 (expression -> expression LESS expression .)
    NEWLINE         reduce using rule 57 (expression -> expression LESS expression .)
    LPAREN          reduce using rule 57 (expression -> expression LESS expression .)
    WORD            reduce using rule 57 (expression -> expression LESS expression .)
    TYPE_A          reduce using rule 57 (expression -> expression LESS expression .)
    TEXT            reduce using rule 57 (expression -> expression LESS expression .)
    SO              reduce using rule 57 (expression -> expression LESS expression .)
    LOOP            reduce using rule 57 (expression -> expression LESS expression .)
    REPEAT          reduce using rule 57 (expression -> expression LESS expression .)
    NUM             reduce using rule 57 (expression -> expression LESS expression .)
    HEX             reduce using rule 57 (expression -> expression LESS expression .)
    TYPE_H          reduce using rule 57 (expression -> expression LESS expression .)
    TYPE_N          reduce using rule 57 (expression -> expression LESS expression .)
    TYPE_S          reduce using rule 57 (expression -> expression LESS expression .)
    $end            reduce using rule 57 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 57 (expression -> expression LESS expression .)
    LSTATE          reduce using rule 57 (expression -> expression LESS expression .)
    RSTATE          reduce using rule 57 (expression -> expression LESS expression .)
    ,               reduce using rule 57 (expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]
  ! MORE            [ shift and go to state 41 ]


state 75

    (58) expression -> expression MORE expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 58 (expression -> expression MORE expression .)
    MINUS           reduce using rule 58 (expression -> expression MORE expression .)
    MUL             reduce using rule 58 (expression -> expression MORE expression .)
    DIV             reduce using rule 58 (expression -> expression MORE expression .)
    MOD             reduce using rule 58 (expression -> expression MORE expression .)
    EQUTO           reduce using rule 58 (expression -> expression MORE expression .)
    NOEQU           reduce using rule 58 (expression -> expression MORE expression .)
    LESS            reduce using rule 58 (expression -> expression MORE expression .)
    MORE            reduce using rule 58 (expression -> expression MORE expression .)
    NEWLINE         reduce using rule 58 (expression -> expression MORE expression .)
    LPAREN          reduce using rule 58 (expression -> expression MORE expression .)
    WORD            reduce using rule 58 (expression -> expression MORE expression .)
    TYPE_A          reduce using rule 58 (expression -> expression MORE expression .)
    TEXT            reduce using rule 58 (expression -> expression MORE expression .)
    SO              reduce using rule 58 (expression -> expression MORE expression .)
    LOOP            reduce using rule 58 (expression -> expression MORE expression .)
    REPEAT          reduce using rule 58 (expression -> expression MORE expression .)
    NUM             reduce using rule 58 (expression -> expression MORE expression .)
    HEX             reduce using rule 58 (expression -> expression MORE expression .)
    TYPE_H          reduce using rule 58 (expression -> expression MORE expression .)
    TYPE_N          reduce using rule 58 (expression -> expression MORE expression .)
    TYPE_S          reduce using rule 58 (expression -> expression MORE expression .)
    $end            reduce using rule 58 (expression -> expression MORE expression .)
    RPAREN          reduce using rule 58 (expression -> expression MORE expression .)
    LSTATE          reduce using rule 58 (expression -> expression MORE expression .)
    RSTATE          reduce using rule 58 (expression -> expression MORE expression .)
    ,               reduce using rule 58 (expression -> expression MORE expression .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]
  ! MORE            [ shift and go to state 41 ]


state 76

    (21) exelse -> OTHERWISE LSTATE . statement LSTATE OTHERWISE
    (22) exelse -> OTHERWISE LSTATE . NEWLINE statement RSTATE
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 101
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 100
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 77

    (28) expression -> term PLUS term .
    (28) expression -> term . PLUS term
    (29) expression -> term . PLUS expression
    (31) expression -> term . MINUS term
    (32) expression -> term . MINUS expression
    (34) expression -> term . MUL term
    (35) expression -> term . MUL expression
    (37) expression -> term . DIV term
    (38) expression -> term . DIV expression
    (40) expression -> term . MOD term
    (41) expression -> term . MOD expression
    (50) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (expression -> term PLUS term .)
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for EQUTO resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for LESS resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for MORE resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for WORD resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for TYPE_A resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for TEXT resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for SO resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for LOOP resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for REPEAT resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for NUM resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for HEX resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for TYPE_H resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for TYPE_N resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for TYPE_S resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for $end resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 28 (expression -> term PLUS term .)
  ! reduce/reduce conflict for , resolved using rule 28 (expression -> term PLUS term .)
    PLUS            reduce using rule 28 (expression -> term PLUS term .)
    MINUS           reduce using rule 28 (expression -> term PLUS term .)
    EQUTO           reduce using rule 28 (expression -> term PLUS term .)
    NOEQU           reduce using rule 28 (expression -> term PLUS term .)
    LESS            reduce using rule 28 (expression -> term PLUS term .)
    MORE            reduce using rule 28 (expression -> term PLUS term .)
    NEWLINE         reduce using rule 28 (expression -> term PLUS term .)
    LPAREN          reduce using rule 28 (expression -> term PLUS term .)
    WORD            reduce using rule 28 (expression -> term PLUS term .)
    TYPE_A          reduce using rule 28 (expression -> term PLUS term .)
    TEXT            reduce using rule 28 (expression -> term PLUS term .)
    SO              reduce using rule 28 (expression -> term PLUS term .)
    LOOP            reduce using rule 28 (expression -> term PLUS term .)
    REPEAT          reduce using rule 28 (expression -> term PLUS term .)
    NUM             reduce using rule 28 (expression -> term PLUS term .)
    HEX             reduce using rule 28 (expression -> term PLUS term .)
    TYPE_H          reduce using rule 28 (expression -> term PLUS term .)
    TYPE_N          reduce using rule 28 (expression -> term PLUS term .)
    TYPE_S          reduce using rule 28 (expression -> term PLUS term .)
    $end            reduce using rule 28 (expression -> term PLUS term .)
    RPAREN          reduce using rule 28 (expression -> term PLUS term .)
    LSTATE          reduce using rule 28 (expression -> term PLUS term .)
    RSTATE          reduce using rule 28 (expression -> term PLUS term .)
    ,               reduce using rule 28 (expression -> term PLUS term .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51
    MOD             shift and go to state 52

  ! MUL             [ reduce using rule 28 (expression -> term PLUS term .) ]
  ! DIV             [ reduce using rule 28 (expression -> term PLUS term .) ]
  ! MOD             [ reduce using rule 28 (expression -> term PLUS term .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! PLUS            [ reduce using rule 50 (expression -> term .) ]
  ! MINUS           [ reduce using rule 50 (expression -> term .) ]
  ! MUL             [ reduce using rule 50 (expression -> term .) ]
  ! DIV             [ reduce using rule 50 (expression -> term .) ]
  ! MOD             [ reduce using rule 50 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 50 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 50 (expression -> term .) ]
  ! LESS            [ reduce using rule 50 (expression -> term .) ]
  ! MORE            [ reduce using rule 50 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 50 (expression -> term .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! WORD            [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_A          [ reduce using rule 50 (expression -> term .) ]
  ! TEXT            [ reduce using rule 50 (expression -> term .) ]
  ! SO              [ reduce using rule 50 (expression -> term .) ]
  ! LOOP            [ reduce using rule 50 (expression -> term .) ]
  ! REPEAT          [ reduce using rule 50 (expression -> term .) ]
  ! NUM             [ reduce using rule 50 (expression -> term .) ]
  ! HEX             [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_H          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_N          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_S          [ reduce using rule 50 (expression -> term .) ]
  ! $end            [ reduce using rule 50 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! ,               [ reduce using rule 50 (expression -> term .) ]


state 78

    (29) expression -> term PLUS expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 29 (expression -> term PLUS expression .)
    MINUS           reduce using rule 29 (expression -> term PLUS expression .)
    EQUTO           reduce using rule 29 (expression -> term PLUS expression .)
    NOEQU           reduce using rule 29 (expression -> term PLUS expression .)
    NEWLINE         reduce using rule 29 (expression -> term PLUS expression .)
    LPAREN          reduce using rule 29 (expression -> term PLUS expression .)
    WORD            reduce using rule 29 (expression -> term PLUS expression .)
    TYPE_A          reduce using rule 29 (expression -> term PLUS expression .)
    TEXT            reduce using rule 29 (expression -> term PLUS expression .)
    SO              reduce using rule 29 (expression -> term PLUS expression .)
    LOOP            reduce using rule 29 (expression -> term PLUS expression .)
    REPEAT          reduce using rule 29 (expression -> term PLUS expression .)
    NUM             reduce using rule 29 (expression -> term PLUS expression .)
    HEX             reduce using rule 29 (expression -> term PLUS expression .)
    TYPE_H          reduce using rule 29 (expression -> term PLUS expression .)
    TYPE_N          reduce using rule 29 (expression -> term PLUS expression .)
    TYPE_S          reduce using rule 29 (expression -> term PLUS expression .)
    $end            reduce using rule 29 (expression -> term PLUS expression .)
    RPAREN          reduce using rule 29 (expression -> term PLUS expression .)
    LSTATE          reduce using rule 29 (expression -> term PLUS expression .)
    RSTATE          reduce using rule 29 (expression -> term PLUS expression .)
    ,               reduce using rule 29 (expression -> term PLUS expression .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MUL             [ reduce using rule 29 (expression -> term PLUS expression .) ]
  ! DIV             [ reduce using rule 29 (expression -> term PLUS expression .) ]
  ! MOD             [ reduce using rule 29 (expression -> term PLUS expression .) ]
  ! LESS            [ reduce using rule 29 (expression -> term PLUS expression .) ]
  ! MORE            [ reduce using rule 29 (expression -> term PLUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 79

    (31) expression -> term MINUS term .
    (28) expression -> term . PLUS term
    (29) expression -> term . PLUS expression
    (31) expression -> term . MINUS term
    (32) expression -> term . MINUS expression
    (34) expression -> term . MUL term
    (35) expression -> term . MUL expression
    (37) expression -> term . DIV term
    (38) expression -> term . DIV expression
    (40) expression -> term . MOD term
    (41) expression -> term . MOD expression
    (50) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> term MINUS term .)
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! reduce/reduce conflict for EQUTO resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for LESS resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for MORE resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for LPAREN resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for WORD resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for TYPE_A resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for TEXT resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for SO resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for LOOP resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for REPEAT resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for NUM resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for HEX resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for TYPE_H resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for TYPE_N resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for TYPE_S resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for $end resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 31 (expression -> term MINUS term .)
  ! reduce/reduce conflict for , resolved using rule 31 (expression -> term MINUS term .)
    PLUS            reduce using rule 31 (expression -> term MINUS term .)
    MINUS           reduce using rule 31 (expression -> term MINUS term .)
    EQUTO           reduce using rule 31 (expression -> term MINUS term .)
    NOEQU           reduce using rule 31 (expression -> term MINUS term .)
    LESS            reduce using rule 31 (expression -> term MINUS term .)
    MORE            reduce using rule 31 (expression -> term MINUS term .)
    NEWLINE         reduce using rule 31 (expression -> term MINUS term .)
    LPAREN          reduce using rule 31 (expression -> term MINUS term .)
    WORD            reduce using rule 31 (expression -> term MINUS term .)
    TYPE_A          reduce using rule 31 (expression -> term MINUS term .)
    TEXT            reduce using rule 31 (expression -> term MINUS term .)
    SO              reduce using rule 31 (expression -> term MINUS term .)
    LOOP            reduce using rule 31 (expression -> term MINUS term .)
    REPEAT          reduce using rule 31 (expression -> term MINUS term .)
    NUM             reduce using rule 31 (expression -> term MINUS term .)
    HEX             reduce using rule 31 (expression -> term MINUS term .)
    TYPE_H          reduce using rule 31 (expression -> term MINUS term .)
    TYPE_N          reduce using rule 31 (expression -> term MINUS term .)
    TYPE_S          reduce using rule 31 (expression -> term MINUS term .)
    $end            reduce using rule 31 (expression -> term MINUS term .)
    RPAREN          reduce using rule 31 (expression -> term MINUS term .)
    LSTATE          reduce using rule 31 (expression -> term MINUS term .)
    RSTATE          reduce using rule 31 (expression -> term MINUS term .)
    ,               reduce using rule 31 (expression -> term MINUS term .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51
    MOD             shift and go to state 52

  ! MUL             [ reduce using rule 31 (expression -> term MINUS term .) ]
  ! DIV             [ reduce using rule 31 (expression -> term MINUS term .) ]
  ! MOD             [ reduce using rule 31 (expression -> term MINUS term .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! PLUS            [ reduce using rule 50 (expression -> term .) ]
  ! MINUS           [ reduce using rule 50 (expression -> term .) ]
  ! MUL             [ reduce using rule 50 (expression -> term .) ]
  ! DIV             [ reduce using rule 50 (expression -> term .) ]
  ! MOD             [ reduce using rule 50 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 50 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 50 (expression -> term .) ]
  ! LESS            [ reduce using rule 50 (expression -> term .) ]
  ! MORE            [ reduce using rule 50 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 50 (expression -> term .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! WORD            [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_A          [ reduce using rule 50 (expression -> term .) ]
  ! TEXT            [ reduce using rule 50 (expression -> term .) ]
  ! SO              [ reduce using rule 50 (expression -> term .) ]
  ! LOOP            [ reduce using rule 50 (expression -> term .) ]
  ! REPEAT          [ reduce using rule 50 (expression -> term .) ]
  ! NUM             [ reduce using rule 50 (expression -> term .) ]
  ! HEX             [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_H          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_N          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_S          [ reduce using rule 50 (expression -> term .) ]
  ! $end            [ reduce using rule 50 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! ,               [ reduce using rule 50 (expression -> term .) ]


state 80

    (32) expression -> term MINUS expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 32 (expression -> term MINUS expression .)
    MINUS           reduce using rule 32 (expression -> term MINUS expression .)
    EQUTO           reduce using rule 32 (expression -> term MINUS expression .)
    NOEQU           reduce using rule 32 (expression -> term MINUS expression .)
    NEWLINE         reduce using rule 32 (expression -> term MINUS expression .)
    LPAREN          reduce using rule 32 (expression -> term MINUS expression .)
    WORD            reduce using rule 32 (expression -> term MINUS expression .)
    TYPE_A          reduce using rule 32 (expression -> term MINUS expression .)
    TEXT            reduce using rule 32 (expression -> term MINUS expression .)
    SO              reduce using rule 32 (expression -> term MINUS expression .)
    LOOP            reduce using rule 32 (expression -> term MINUS expression .)
    REPEAT          reduce using rule 32 (expression -> term MINUS expression .)
    NUM             reduce using rule 32 (expression -> term MINUS expression .)
    HEX             reduce using rule 32 (expression -> term MINUS expression .)
    TYPE_H          reduce using rule 32 (expression -> term MINUS expression .)
    TYPE_N          reduce using rule 32 (expression -> term MINUS expression .)
    TYPE_S          reduce using rule 32 (expression -> term MINUS expression .)
    $end            reduce using rule 32 (expression -> term MINUS expression .)
    RPAREN          reduce using rule 32 (expression -> term MINUS expression .)
    LSTATE          reduce using rule 32 (expression -> term MINUS expression .)
    RSTATE          reduce using rule 32 (expression -> term MINUS expression .)
    ,               reduce using rule 32 (expression -> term MINUS expression .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MUL             [ reduce using rule 32 (expression -> term MINUS expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> term MINUS expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> term MINUS expression .) ]
  ! LESS            [ reduce using rule 32 (expression -> term MINUS expression .) ]
  ! MORE            [ reduce using rule 32 (expression -> term MINUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 81

    (34) expression -> term MUL term .
    (28) expression -> term . PLUS term
    (29) expression -> term . PLUS expression
    (31) expression -> term . MINUS term
    (32) expression -> term . MINUS expression
    (34) expression -> term . MUL term
    (35) expression -> term . MUL expression
    (37) expression -> term . DIV term
    (38) expression -> term . DIV expression
    (40) expression -> term . MOD term
    (41) expression -> term . MOD expression
    (50) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for MUL resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for DIV resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for MOD resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for EQUTO resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for LESS resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for MORE resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for LPAREN resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for WORD resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for TYPE_A resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for TEXT resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for SO resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for LOOP resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for NUM resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for HEX resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for TYPE_H resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for TYPE_N resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for TYPE_S resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 34 (expression -> term MUL term .)
  ! reduce/reduce conflict for , resolved using rule 34 (expression -> term MUL term .)
    PLUS            reduce using rule 34 (expression -> term MUL term .)
    MINUS           reduce using rule 34 (expression -> term MUL term .)
    MUL             reduce using rule 34 (expression -> term MUL term .)
    DIV             reduce using rule 34 (expression -> term MUL term .)
    MOD             reduce using rule 34 (expression -> term MUL term .)
    EQUTO           reduce using rule 34 (expression -> term MUL term .)
    NOEQU           reduce using rule 34 (expression -> term MUL term .)
    LESS            reduce using rule 34 (expression -> term MUL term .)
    MORE            reduce using rule 34 (expression -> term MUL term .)
    NEWLINE         reduce using rule 34 (expression -> term MUL term .)
    LPAREN          reduce using rule 34 (expression -> term MUL term .)
    WORD            reduce using rule 34 (expression -> term MUL term .)
    TYPE_A          reduce using rule 34 (expression -> term MUL term .)
    TEXT            reduce using rule 34 (expression -> term MUL term .)
    SO              reduce using rule 34 (expression -> term MUL term .)
    LOOP            reduce using rule 34 (expression -> term MUL term .)
    REPEAT          reduce using rule 34 (expression -> term MUL term .)
    NUM             reduce using rule 34 (expression -> term MUL term .)
    HEX             reduce using rule 34 (expression -> term MUL term .)
    TYPE_H          reduce using rule 34 (expression -> term MUL term .)
    TYPE_N          reduce using rule 34 (expression -> term MUL term .)
    TYPE_S          reduce using rule 34 (expression -> term MUL term .)
    $end            reduce using rule 34 (expression -> term MUL term .)
    RPAREN          reduce using rule 34 (expression -> term MUL term .)
    LSTATE          reduce using rule 34 (expression -> term MUL term .)
    RSTATE          reduce using rule 34 (expression -> term MUL term .)
    ,               reduce using rule 34 (expression -> term MUL term .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MUL             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! PLUS            [ reduce using rule 50 (expression -> term .) ]
  ! MINUS           [ reduce using rule 50 (expression -> term .) ]
  ! MUL             [ reduce using rule 50 (expression -> term .) ]
  ! DIV             [ reduce using rule 50 (expression -> term .) ]
  ! MOD             [ reduce using rule 50 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 50 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 50 (expression -> term .) ]
  ! LESS            [ reduce using rule 50 (expression -> term .) ]
  ! MORE            [ reduce using rule 50 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 50 (expression -> term .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! WORD            [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_A          [ reduce using rule 50 (expression -> term .) ]
  ! TEXT            [ reduce using rule 50 (expression -> term .) ]
  ! SO              [ reduce using rule 50 (expression -> term .) ]
  ! LOOP            [ reduce using rule 50 (expression -> term .) ]
  ! REPEAT          [ reduce using rule 50 (expression -> term .) ]
  ! NUM             [ reduce using rule 50 (expression -> term .) ]
  ! HEX             [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_H          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_N          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_S          [ reduce using rule 50 (expression -> term .) ]
  ! $end            [ reduce using rule 50 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! ,               [ reduce using rule 50 (expression -> term .) ]


state 82

    (35) expression -> term MUL expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 35 (expression -> term MUL expression .)
    MINUS           reduce using rule 35 (expression -> term MUL expression .)
    MUL             reduce using rule 35 (expression -> term MUL expression .)
    DIV             reduce using rule 35 (expression -> term MUL expression .)
    MOD             reduce using rule 35 (expression -> term MUL expression .)
    EQUTO           reduce using rule 35 (expression -> term MUL expression .)
    NOEQU           reduce using rule 35 (expression -> term MUL expression .)
    NEWLINE         reduce using rule 35 (expression -> term MUL expression .)
    LPAREN          reduce using rule 35 (expression -> term MUL expression .)
    WORD            reduce using rule 35 (expression -> term MUL expression .)
    TYPE_A          reduce using rule 35 (expression -> term MUL expression .)
    TEXT            reduce using rule 35 (expression -> term MUL expression .)
    SO              reduce using rule 35 (expression -> term MUL expression .)
    LOOP            reduce using rule 35 (expression -> term MUL expression .)
    REPEAT          reduce using rule 35 (expression -> term MUL expression .)
    NUM             reduce using rule 35 (expression -> term MUL expression .)
    HEX             reduce using rule 35 (expression -> term MUL expression .)
    TYPE_H          reduce using rule 35 (expression -> term MUL expression .)
    TYPE_N          reduce using rule 35 (expression -> term MUL expression .)
    TYPE_S          reduce using rule 35 (expression -> term MUL expression .)
    $end            reduce using rule 35 (expression -> term MUL expression .)
    RPAREN          reduce using rule 35 (expression -> term MUL expression .)
    LSTATE          reduce using rule 35 (expression -> term MUL expression .)
    RSTATE          reduce using rule 35 (expression -> term MUL expression .)
    ,               reduce using rule 35 (expression -> term MUL expression .)
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! LESS            [ reduce using rule 35 (expression -> term MUL expression .) ]
  ! MORE            [ reduce using rule 35 (expression -> term MUL expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 83

    (37) expression -> term DIV term .
    (28) expression -> term . PLUS term
    (29) expression -> term . PLUS expression
    (31) expression -> term . MINUS term
    (32) expression -> term . MINUS expression
    (34) expression -> term . MUL term
    (35) expression -> term . MUL expression
    (37) expression -> term . DIV term
    (38) expression -> term . DIV expression
    (40) expression -> term . MOD term
    (41) expression -> term . MOD expression
    (50) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for MUL resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for DIV resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for MOD resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for EQUTO resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for LESS resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for MORE resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for LPAREN resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for WORD resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for TYPE_A resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for TEXT resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for SO resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for LOOP resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for REPEAT resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for NUM resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for HEX resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for TYPE_H resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for TYPE_N resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for TYPE_S resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for $end resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 37 (expression -> term DIV term .)
  ! reduce/reduce conflict for , resolved using rule 37 (expression -> term DIV term .)
    PLUS            reduce using rule 37 (expression -> term DIV term .)
    MINUS           reduce using rule 37 (expression -> term DIV term .)
    MUL             reduce using rule 37 (expression -> term DIV term .)
    DIV             reduce using rule 37 (expression -> term DIV term .)
    MOD             reduce using rule 37 (expression -> term DIV term .)
    EQUTO           reduce using rule 37 (expression -> term DIV term .)
    NOEQU           reduce using rule 37 (expression -> term DIV term .)
    LESS            reduce using rule 37 (expression -> term DIV term .)
    MORE            reduce using rule 37 (expression -> term DIV term .)
    NEWLINE         reduce using rule 37 (expression -> term DIV term .)
    LPAREN          reduce using rule 37 (expression -> term DIV term .)
    WORD            reduce using rule 37 (expression -> term DIV term .)
    TYPE_A          reduce using rule 37 (expression -> term DIV term .)
    TEXT            reduce using rule 37 (expression -> term DIV term .)
    SO              reduce using rule 37 (expression -> term DIV term .)
    LOOP            reduce using rule 37 (expression -> term DIV term .)
    REPEAT          reduce using rule 37 (expression -> term DIV term .)
    NUM             reduce using rule 37 (expression -> term DIV term .)
    HEX             reduce using rule 37 (expression -> term DIV term .)
    TYPE_H          reduce using rule 37 (expression -> term DIV term .)
    TYPE_N          reduce using rule 37 (expression -> term DIV term .)
    TYPE_S          reduce using rule 37 (expression -> term DIV term .)
    $end            reduce using rule 37 (expression -> term DIV term .)
    RPAREN          reduce using rule 37 (expression -> term DIV term .)
    LSTATE          reduce using rule 37 (expression -> term DIV term .)
    RSTATE          reduce using rule 37 (expression -> term DIV term .)
    ,               reduce using rule 37 (expression -> term DIV term .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MUL             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! PLUS            [ reduce using rule 50 (expression -> term .) ]
  ! MINUS           [ reduce using rule 50 (expression -> term .) ]
  ! MUL             [ reduce using rule 50 (expression -> term .) ]
  ! DIV             [ reduce using rule 50 (expression -> term .) ]
  ! MOD             [ reduce using rule 50 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 50 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 50 (expression -> term .) ]
  ! LESS            [ reduce using rule 50 (expression -> term .) ]
  ! MORE            [ reduce using rule 50 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 50 (expression -> term .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! WORD            [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_A          [ reduce using rule 50 (expression -> term .) ]
  ! TEXT            [ reduce using rule 50 (expression -> term .) ]
  ! SO              [ reduce using rule 50 (expression -> term .) ]
  ! LOOP            [ reduce using rule 50 (expression -> term .) ]
  ! REPEAT          [ reduce using rule 50 (expression -> term .) ]
  ! NUM             [ reduce using rule 50 (expression -> term .) ]
  ! HEX             [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_H          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_N          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_S          [ reduce using rule 50 (expression -> term .) ]
  ! $end            [ reduce using rule 50 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! ,               [ reduce using rule 50 (expression -> term .) ]


state 84

    (38) expression -> term DIV expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 38 (expression -> term DIV expression .)
    MINUS           reduce using rule 38 (expression -> term DIV expression .)
    MUL             reduce using rule 38 (expression -> term DIV expression .)
    DIV             reduce using rule 38 (expression -> term DIV expression .)
    MOD             reduce using rule 38 (expression -> term DIV expression .)
    EQUTO           reduce using rule 38 (expression -> term DIV expression .)
    NOEQU           reduce using rule 38 (expression -> term DIV expression .)
    NEWLINE         reduce using rule 38 (expression -> term DIV expression .)
    LPAREN          reduce using rule 38 (expression -> term DIV expression .)
    WORD            reduce using rule 38 (expression -> term DIV expression .)
    TYPE_A          reduce using rule 38 (expression -> term DIV expression .)
    TEXT            reduce using rule 38 (expression -> term DIV expression .)
    SO              reduce using rule 38 (expression -> term DIV expression .)
    LOOP            reduce using rule 38 (expression -> term DIV expression .)
    REPEAT          reduce using rule 38 (expression -> term DIV expression .)
    NUM             reduce using rule 38 (expression -> term DIV expression .)
    HEX             reduce using rule 38 (expression -> term DIV expression .)
    TYPE_H          reduce using rule 38 (expression -> term DIV expression .)
    TYPE_N          reduce using rule 38 (expression -> term DIV expression .)
    TYPE_S          reduce using rule 38 (expression -> term DIV expression .)
    $end            reduce using rule 38 (expression -> term DIV expression .)
    RPAREN          reduce using rule 38 (expression -> term DIV expression .)
    LSTATE          reduce using rule 38 (expression -> term DIV expression .)
    RSTATE          reduce using rule 38 (expression -> term DIV expression .)
    ,               reduce using rule 38 (expression -> term DIV expression .)
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! LESS            [ reduce using rule 38 (expression -> term DIV expression .) ]
  ! MORE            [ reduce using rule 38 (expression -> term DIV expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 85

    (40) expression -> term MOD term .
    (28) expression -> term . PLUS term
    (29) expression -> term . PLUS expression
    (31) expression -> term . MINUS term
    (32) expression -> term . MINUS expression
    (34) expression -> term . MUL term
    (35) expression -> term . MUL expression
    (37) expression -> term . DIV term
    (38) expression -> term . DIV expression
    (40) expression -> term . MOD term
    (41) expression -> term . MOD expression
    (50) expression -> term .

  ! reduce/reduce conflict for PLUS resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for MUL resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for DIV resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for MOD resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for EQUTO resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for NOEQU resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for LESS resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for MORE resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for LPAREN resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for WORD resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for TYPE_A resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for TEXT resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for SO resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for LOOP resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for REPEAT resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for NUM resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for HEX resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for TYPE_H resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for TYPE_N resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for TYPE_S resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for $end resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for LSTATE resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for RSTATE resolved using rule 40 (expression -> term MOD term .)
  ! reduce/reduce conflict for , resolved using rule 40 (expression -> term MOD term .)
    PLUS            reduce using rule 40 (expression -> term MOD term .)
    MINUS           reduce using rule 40 (expression -> term MOD term .)
    MUL             reduce using rule 40 (expression -> term MOD term .)
    DIV             reduce using rule 40 (expression -> term MOD term .)
    MOD             reduce using rule 40 (expression -> term MOD term .)
    EQUTO           reduce using rule 40 (expression -> term MOD term .)
    NOEQU           reduce using rule 40 (expression -> term MOD term .)
    LESS            reduce using rule 40 (expression -> term MOD term .)
    MORE            reduce using rule 40 (expression -> term MOD term .)
    NEWLINE         reduce using rule 40 (expression -> term MOD term .)
    LPAREN          reduce using rule 40 (expression -> term MOD term .)
    WORD            reduce using rule 40 (expression -> term MOD term .)
    TYPE_A          reduce using rule 40 (expression -> term MOD term .)
    TEXT            reduce using rule 40 (expression -> term MOD term .)
    SO              reduce using rule 40 (expression -> term MOD term .)
    LOOP            reduce using rule 40 (expression -> term MOD term .)
    REPEAT          reduce using rule 40 (expression -> term MOD term .)
    NUM             reduce using rule 40 (expression -> term MOD term .)
    HEX             reduce using rule 40 (expression -> term MOD term .)
    TYPE_H          reduce using rule 40 (expression -> term MOD term .)
    TYPE_N          reduce using rule 40 (expression -> term MOD term .)
    TYPE_S          reduce using rule 40 (expression -> term MOD term .)
    $end            reduce using rule 40 (expression -> term MOD term .)
    RPAREN          reduce using rule 40 (expression -> term MOD term .)
    LSTATE          reduce using rule 40 (expression -> term MOD term .)
    RSTATE          reduce using rule 40 (expression -> term MOD term .)
    ,               reduce using rule 40 (expression -> term MOD term .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MUL             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! PLUS            [ reduce using rule 50 (expression -> term .) ]
  ! MINUS           [ reduce using rule 50 (expression -> term .) ]
  ! MUL             [ reduce using rule 50 (expression -> term .) ]
  ! DIV             [ reduce using rule 50 (expression -> term .) ]
  ! MOD             [ reduce using rule 50 (expression -> term .) ]
  ! EQUTO           [ reduce using rule 50 (expression -> term .) ]
  ! NOEQU           [ reduce using rule 50 (expression -> term .) ]
  ! LESS            [ reduce using rule 50 (expression -> term .) ]
  ! MORE            [ reduce using rule 50 (expression -> term .) ]
  ! NEWLINE         [ reduce using rule 50 (expression -> term .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! WORD            [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_A          [ reduce using rule 50 (expression -> term .) ]
  ! TEXT            [ reduce using rule 50 (expression -> term .) ]
  ! SO              [ reduce using rule 50 (expression -> term .) ]
  ! LOOP            [ reduce using rule 50 (expression -> term .) ]
  ! REPEAT          [ reduce using rule 50 (expression -> term .) ]
  ! NUM             [ reduce using rule 50 (expression -> term .) ]
  ! HEX             [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_H          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_N          [ reduce using rule 50 (expression -> term .) ]
  ! TYPE_S          [ reduce using rule 50 (expression -> term .) ]
  ! $end            [ reduce using rule 50 (expression -> term .) ]
  ! RPAREN          [ reduce using rule 50 (expression -> term .) ]
  ! LSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! RSTATE          [ reduce using rule 50 (expression -> term .) ]
  ! ,               [ reduce using rule 50 (expression -> term .) ]


state 86

    (41) expression -> term MOD expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    PLUS            reduce using rule 41 (expression -> term MOD expression .)
    MINUS           reduce using rule 41 (expression -> term MOD expression .)
    MUL             reduce using rule 41 (expression -> term MOD expression .)
    DIV             reduce using rule 41 (expression -> term MOD expression .)
    MOD             reduce using rule 41 (expression -> term MOD expression .)
    EQUTO           reduce using rule 41 (expression -> term MOD expression .)
    NOEQU           reduce using rule 41 (expression -> term MOD expression .)
    NEWLINE         reduce using rule 41 (expression -> term MOD expression .)
    LPAREN          reduce using rule 41 (expression -> term MOD expression .)
    WORD            reduce using rule 41 (expression -> term MOD expression .)
    TYPE_A          reduce using rule 41 (expression -> term MOD expression .)
    TEXT            reduce using rule 41 (expression -> term MOD expression .)
    SO              reduce using rule 41 (expression -> term MOD expression .)
    LOOP            reduce using rule 41 (expression -> term MOD expression .)
    REPEAT          reduce using rule 41 (expression -> term MOD expression .)
    NUM             reduce using rule 41 (expression -> term MOD expression .)
    HEX             reduce using rule 41 (expression -> term MOD expression .)
    TYPE_H          reduce using rule 41 (expression -> term MOD expression .)
    TYPE_N          reduce using rule 41 (expression -> term MOD expression .)
    TYPE_S          reduce using rule 41 (expression -> term MOD expression .)
    $end            reduce using rule 41 (expression -> term MOD expression .)
    RPAREN          reduce using rule 41 (expression -> term MOD expression .)
    LSTATE          reduce using rule 41 (expression -> term MOD expression .)
    RSTATE          reduce using rule 41 (expression -> term MOD expression .)
    ,               reduce using rule 41 (expression -> term MOD expression .)
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! LESS            [ reduce using rule 41 (expression -> term MOD expression .) ]
  ! MORE            [ reduce using rule 41 (expression -> term MOD expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! MUL             [ shift and go to state 35 ]
  ! DIV             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! EQUTO           [ shift and go to state 38 ]
  ! NOEQU           [ shift and go to state 39 ]


state 87

    (52) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    EQUTO           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    NOEQU           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MORE            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    WORD            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    TYPE_A          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    TEXT            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    SO              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    NUM             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    HEX             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    TYPE_H          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    TYPE_N          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    TYPE_S          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LSTATE          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    RSTATE          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    ,               reduce using rule 52 (expression -> LPAREN expression RPAREN .)


state 88

    (53) exassign -> WORD EQU expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

  ! shift/reduce conflict for MINUS resolved as shift
    NEWLINE         reduce using rule 53 (exassign -> WORD EQU expression .)
    LPAREN          reduce using rule 53 (exassign -> WORD EQU expression .)
    WORD            reduce using rule 53 (exassign -> WORD EQU expression .)
    TYPE_A          reduce using rule 53 (exassign -> WORD EQU expression .)
    TEXT            reduce using rule 53 (exassign -> WORD EQU expression .)
    SO              reduce using rule 53 (exassign -> WORD EQU expression .)
    LOOP            reduce using rule 53 (exassign -> WORD EQU expression .)
    REPEAT          reduce using rule 53 (exassign -> WORD EQU expression .)
    NUM             reduce using rule 53 (exassign -> WORD EQU expression .)
    HEX             reduce using rule 53 (exassign -> WORD EQU expression .)
    TYPE_H          reduce using rule 53 (exassign -> WORD EQU expression .)
    TYPE_N          reduce using rule 53 (exassign -> WORD EQU expression .)
    TYPE_S          reduce using rule 53 (exassign -> WORD EQU expression .)
    $end            reduce using rule 53 (exassign -> WORD EQU expression .)
    LSTATE          reduce using rule 53 (exassign -> WORD EQU expression .)
    RSTATE          reduce using rule 53 (exassign -> WORD EQU expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MINUS           [ reduce using rule 53 (exassign -> WORD EQU expression .) ]


state 89

    (62) arraysh -> WORD LARRY WORD . RARRY

    RARRY           shift and go to state 102


state 90

    (61) arraysh -> WORD LARRY NUM . RARRY

    RARRY           shift and go to state 103


state 91

    (54) exassign -> arraysh EQU expression .
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

  ! shift/reduce conflict for MINUS resolved as shift
    NEWLINE         reduce using rule 54 (exassign -> arraysh EQU expression .)
    LPAREN          reduce using rule 54 (exassign -> arraysh EQU expression .)
    WORD            reduce using rule 54 (exassign -> arraysh EQU expression .)
    TYPE_A          reduce using rule 54 (exassign -> arraysh EQU expression .)
    TEXT            reduce using rule 54 (exassign -> arraysh EQU expression .)
    SO              reduce using rule 54 (exassign -> arraysh EQU expression .)
    LOOP            reduce using rule 54 (exassign -> arraysh EQU expression .)
    REPEAT          reduce using rule 54 (exassign -> arraysh EQU expression .)
    NUM             reduce using rule 54 (exassign -> arraysh EQU expression .)
    HEX             reduce using rule 54 (exassign -> arraysh EQU expression .)
    TYPE_H          reduce using rule 54 (exassign -> arraysh EQU expression .)
    TYPE_N          reduce using rule 54 (exassign -> arraysh EQU expression .)
    TYPE_S          reduce using rule 54 (exassign -> arraysh EQU expression .)
    $end            reduce using rule 54 (exassign -> arraysh EQU expression .)
    LSTATE          reduce using rule 54 (exassign -> arraysh EQU expression .)
    RSTATE          reduce using rule 54 (exassign -> arraysh EQU expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41

  ! MINUS           [ reduce using rule 54 (exassign -> arraysh EQU expression .) ]


state 92

    (60) declare -> typeconst WORD EQU . term
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    term                           shift and go to state 104
    arraysh                        shift and go to state 55

state 93

    (63) declare -> TYPE_A WORD EQU . LSTATE arrayX RSTATE

    LSTATE          shift and go to state 105


state 94

    (64) declare -> TYPE_A WORD LARRY . NUM RARRY
    (65) declare -> TYPE_A WORD LARRY . NUM RARRY EQU LSTATE arrayX RSTATE

    NUM             shift and go to state 106


state 95

    (69) exprint -> TEXT LPAREN WORD . printMore RPAREN
    (70) printMore -> . , expression printMore
    (71) printMore -> . empty empty empty
    (72) empty -> .

    ,               shift and go to state 108
    RPAREN          reduce using rule 72 (empty -> .)

    printMore                      shift and go to state 107
    empty                          shift and go to state 109

state 96

    (18) exif -> SO LPAREN expression . RPAREN LSTATE statement RSTATE
    (19) exif -> SO LPAREN expression . RPAREN NEWLINE LSTATE statement RSTATE
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    RPAREN          shift and go to state 110
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41


state 97

    (23) exloop -> LOOP LPAREN expression . RPAREN LSTATE statement RSTATE
    (24) exloop -> LOOP LPAREN expression . RPAREN LSTATE NEWLINE statement RSTATE
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    RPAREN          shift and go to state 111
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41


state 98

    (25) exrepeat -> REPEAT LPAREN expression . RPAREN LSTATE statement RSTATE
    (26) exrepeat -> REPEAT LPAREN expression . RPAREN NEWLINE LSTATE statement RSTATE
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression

    RPAREN          shift and go to state 112
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41


state 99

    (7) statement -> statement NEWLINE statement NEWLINE .
    (6) statement -> statement NEWLINE . statement
    (7) statement -> statement NEWLINE . statement NEWLINE
    (15) statement -> statement NEWLINE .
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

  ! reduce/reduce conflict for NEWLINE resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for MINUS resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for WORD resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for TYPE_A resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for TEXT resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for SO resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for LOOP resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for REPEAT resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for NUM resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for HEX resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for TYPE_H resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for TYPE_N resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for TYPE_S resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for LSTATE resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! reduce/reduce conflict for RSTATE resolved using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for TYPE_A resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SO resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for TYPE_H resolved as shift
  ! shift/reduce conflict for TYPE_N resolved as shift
  ! shift/reduce conflict for TYPE_S resolved as shift
    MINUS           reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    LPAREN          reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    NUM             reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    HEX             reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    $end            reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    LSTATE          reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    RSTATE          reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .)
    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

  ! NEWLINE         [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! WORD            [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! TYPE_A          [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! TEXT            [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! SO              [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! LOOP            [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! REPEAT          [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! TYPE_H          [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! TYPE_N          [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! TYPE_S          [ reduce using rule 7 (statement -> statement NEWLINE statement NEWLINE .) ]
  ! NEWLINE         [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! MINUS           [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! LPAREN          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! WORD            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_A          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TEXT            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! SO              [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! LOOP            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! REPEAT          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! NUM             [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! HEX             [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_H          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_N          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! TYPE_S          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! $end            [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! LSTATE          [ reduce using rule 15 (statement -> statement NEWLINE .) ]
  ! RSTATE          [ reduce using rule 15 (statement -> statement NEWLINE .) ]

    statement                      shift and go to state 66
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 100

    (21) exelse -> OTHERWISE LSTATE statement . LSTATE OTHERWISE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

    LSTATE          shift and go to state 113
    NEWLINE         shift and go to state 32


state 101

    (22) exelse -> OTHERWISE LSTATE NEWLINE . statement RSTATE
    (16) statement -> NEWLINE . statement
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 114
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 102

    (62) arraysh -> WORD LARRY WORD RARRY .

    EQU             reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    PLUS            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    MINUS           reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    MUL             reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    DIV             reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    MOD             reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    EQUTO           reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    NOEQU           reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    LESS            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    MORE            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    NEWLINE         reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    LPAREN          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    WORD            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    TYPE_A          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    TEXT            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    SO              reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    LOOP            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    REPEAT          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    NUM             reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    HEX             reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    TYPE_H          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    TYPE_N          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    TYPE_S          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    $end            reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    RPAREN          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    LSTATE          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    RSTATE          reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)
    ,               reduce using rule 62 (arraysh -> WORD LARRY WORD RARRY .)


state 103

    (61) arraysh -> WORD LARRY NUM RARRY .

    EQU             reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    PLUS            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    MINUS           reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    MUL             reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    DIV             reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    MOD             reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    EQUTO           reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    NOEQU           reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    LESS            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    MORE            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    NEWLINE         reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    LPAREN          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    WORD            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    TYPE_A          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    TEXT            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    SO              reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    LOOP            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    REPEAT          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    NUM             reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    HEX             reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    TYPE_H          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    TYPE_N          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    TYPE_S          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    $end            reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    RPAREN          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    LSTATE          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    RSTATE          reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)
    ,               reduce using rule 61 (arraysh -> WORD LARRY NUM RARRY .)


state 104

    (60) declare -> typeconst WORD EQU term .

    NEWLINE         reduce using rule 60 (declare -> typeconst WORD EQU term .)
    MINUS           reduce using rule 60 (declare -> typeconst WORD EQU term .)
    LPAREN          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    WORD            reduce using rule 60 (declare -> typeconst WORD EQU term .)
    TYPE_A          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    TEXT            reduce using rule 60 (declare -> typeconst WORD EQU term .)
    SO              reduce using rule 60 (declare -> typeconst WORD EQU term .)
    LOOP            reduce using rule 60 (declare -> typeconst WORD EQU term .)
    REPEAT          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    NUM             reduce using rule 60 (declare -> typeconst WORD EQU term .)
    HEX             reduce using rule 60 (declare -> typeconst WORD EQU term .)
    TYPE_H          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    TYPE_N          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    TYPE_S          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    $end            reduce using rule 60 (declare -> typeconst WORD EQU term .)
    LSTATE          reduce using rule 60 (declare -> typeconst WORD EQU term .)
    RSTATE          reduce using rule 60 (declare -> typeconst WORD EQU term .)


state 105

    (63) declare -> TYPE_A WORD EQU LSTATE . arrayX RSTATE
    (66) arrayX -> . NUM arrayY

    NUM             shift and go to state 116

    arrayX                         shift and go to state 115

state 106

    (64) declare -> TYPE_A WORD LARRY NUM . RARRY
    (65) declare -> TYPE_A WORD LARRY NUM . RARRY EQU LSTATE arrayX RSTATE

    RARRY           shift and go to state 117


state 107

    (69) exprint -> TEXT LPAREN WORD printMore . RPAREN

    RPAREN          shift and go to state 118


state 108

    (70) printMore -> , . expression printMore
    (27) expression -> . expression PLUS expression
    (28) expression -> . term PLUS term
    (29) expression -> . term PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . term MINUS term
    (32) expression -> . term MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . term MUL term
    (35) expression -> . term MUL expression
    (36) expression -> . expression DIV expression
    (37) expression -> . term DIV term
    (38) expression -> . term DIV expression
    (39) expression -> . expression MOD expression
    (40) expression -> . term MOD term
    (41) expression -> . term MOD expression
    (50) expression -> . term
    (51) expression -> . MINUS expression
    (52) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression EQUTO expression
    (56) expression -> . expression NOEQU expression
    (57) expression -> . expression LESS expression
    (58) expression -> . expression MORE expression
    (42) term -> . WORD
    (43) term -> . arraysh
    (44) term -> . NUM
    (45) term -> . HEX
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY

    MINUS           shift and go to state 15
    LPAREN          shift and go to state 16
    WORD            shift and go to state 54
    NUM             shift and go to state 21
    HEX             shift and go to state 26

    expression                     shift and go to state 119
    term                           shift and go to state 14
    arraysh                        shift and go to state 55

state 109

    (71) printMore -> empty . empty empty
    (72) empty -> .

    RPAREN          reduce using rule 72 (empty -> .)

    empty                          shift and go to state 120

state 110

    (18) exif -> SO LPAREN expression RPAREN . LSTATE statement RSTATE
    (19) exif -> SO LPAREN expression RPAREN . NEWLINE LSTATE statement RSTATE

    LSTATE          shift and go to state 121
    NEWLINE         shift and go to state 122


state 111

    (23) exloop -> LOOP LPAREN expression RPAREN . LSTATE statement RSTATE
    (24) exloop -> LOOP LPAREN expression RPAREN . LSTATE NEWLINE statement RSTATE

    LSTATE          shift and go to state 123


state 112

    (25) exrepeat -> REPEAT LPAREN expression RPAREN . LSTATE statement RSTATE
    (26) exrepeat -> REPEAT LPAREN expression RPAREN . NEWLINE LSTATE statement RSTATE

    LSTATE          shift and go to state 124
    NEWLINE         shift and go to state 125


state 113

    (21) exelse -> OTHERWISE LSTATE statement LSTATE . OTHERWISE

    OTHERWISE       shift and go to state 126


state 114

    (22) exelse -> OTHERWISE LSTATE NEWLINE statement . RSTATE
    (16) statement -> NEWLINE statement .
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    RSTATE          shift and go to state 127
    LSTATE          reduce using rule 16 (statement -> NEWLINE statement .)
    NEWLINE         shift and go to state 32

  ! NEWLINE         [ reduce using rule 16 (statement -> NEWLINE statement .) ]


state 115

    (63) declare -> TYPE_A WORD EQU LSTATE arrayX . RSTATE

    RSTATE          shift and go to state 128


state 116

    (66) arrayX -> NUM . arrayY
    (67) arrayY -> . COMMA NUM arrayY
    (68) arrayY -> . empty empty empty
    (72) empty -> .

    COMMA           shift and go to state 130
    RSTATE          reduce using rule 72 (empty -> .)

    arrayY                         shift and go to state 129
    empty                          shift and go to state 131

state 117

    (64) declare -> TYPE_A WORD LARRY NUM RARRY .
    (65) declare -> TYPE_A WORD LARRY NUM RARRY . EQU LSTATE arrayX RSTATE

    NEWLINE         reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    MINUS           reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    LPAREN          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    WORD            reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    TYPE_A          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    TEXT            reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    SO              reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    LOOP            reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    REPEAT          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    NUM             reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    HEX             reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    TYPE_H          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    TYPE_N          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    TYPE_S          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    $end            reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    LSTATE          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    RSTATE          reduce using rule 64 (declare -> TYPE_A WORD LARRY NUM RARRY .)
    EQU             shift and go to state 132


state 118

    (69) exprint -> TEXT LPAREN WORD printMore RPAREN .

    NEWLINE         reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    MINUS           reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    LPAREN          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    WORD            reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    TYPE_A          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    TEXT            reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    SO              reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    LOOP            reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    REPEAT          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    NUM             reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    HEX             reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    TYPE_H          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    TYPE_N          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    TYPE_S          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    $end            reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    LSTATE          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)
    RSTATE          reduce using rule 69 (exprint -> TEXT LPAREN WORD printMore RPAREN .)


state 119

    (70) printMore -> , expression . printMore
    (27) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (36) expression -> expression . DIV expression
    (39) expression -> expression . MOD expression
    (55) expression -> expression . EQUTO expression
    (56) expression -> expression . NOEQU expression
    (57) expression -> expression . LESS expression
    (58) expression -> expression . MORE expression
    (70) printMore -> . , expression printMore
    (71) printMore -> . empty empty empty
    (72) empty -> .

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    MUL             shift and go to state 35
    DIV             shift and go to state 36
    MOD             shift and go to state 37
    EQUTO           shift and go to state 38
    NOEQU           shift and go to state 39
    LESS            shift and go to state 40
    MORE            shift and go to state 41
    ,               shift and go to state 108
    RPAREN          reduce using rule 72 (empty -> .)

    printMore                      shift and go to state 133
    empty                          shift and go to state 109

state 120

    (71) printMore -> empty empty . empty
    (72) empty -> .

    RPAREN          reduce using rule 72 (empty -> .)

    empty                          shift and go to state 134

state 121

    (18) exif -> SO LPAREN expression RPAREN LSTATE . statement RSTATE
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 135
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 122

    (19) exif -> SO LPAREN expression RPAREN NEWLINE . LSTATE statement RSTATE

    LSTATE          shift and go to state 136


state 123

    (23) exloop -> LOOP LPAREN expression RPAREN LSTATE . statement RSTATE
    (24) exloop -> LOOP LPAREN expression RPAREN LSTATE . NEWLINE statement RSTATE
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 138
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 137
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 124

    (25) exrepeat -> REPEAT LPAREN expression RPAREN LSTATE . statement RSTATE
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 139
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 125

    (26) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE . LSTATE statement RSTATE

    LSTATE          shift and go to state 140


state 126

    (21) exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .

    NEWLINE         reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    MINUS           reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    LPAREN          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    WORD            reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    TYPE_A          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    TEXT            reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    SO              reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    LOOP            reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    REPEAT          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    NUM             reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    HEX             reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    TYPE_H          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    TYPE_N          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    TYPE_S          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    $end            reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    LSTATE          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)
    RSTATE          reduce using rule 21 (exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE .)


state 127

    (22) exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .

    NEWLINE         reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    MINUS           reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    LPAREN          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    WORD            reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    TYPE_A          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    TEXT            reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    SO              reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    LOOP            reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    REPEAT          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    NUM             reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    HEX             reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    TYPE_H          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    TYPE_N          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    TYPE_S          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    $end            reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    LSTATE          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)
    RSTATE          reduce using rule 22 (exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE .)


state 128

    (63) declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .

    NEWLINE         reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    MINUS           reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    LPAREN          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    WORD            reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    TYPE_A          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    TEXT            reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    SO              reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    LOOP            reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    REPEAT          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    NUM             reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    HEX             reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    TYPE_H          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    TYPE_N          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    TYPE_S          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    $end            reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    LSTATE          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)
    RSTATE          reduce using rule 63 (declare -> TYPE_A WORD EQU LSTATE arrayX RSTATE .)


state 129

    (66) arrayX -> NUM arrayY .

    RSTATE          reduce using rule 66 (arrayX -> NUM arrayY .)


state 130

    (67) arrayY -> COMMA . NUM arrayY

    NUM             shift and go to state 141


state 131

    (68) arrayY -> empty . empty empty
    (72) empty -> .

    RSTATE          reduce using rule 72 (empty -> .)

    empty                          shift and go to state 142

state 132

    (65) declare -> TYPE_A WORD LARRY NUM RARRY EQU . LSTATE arrayX RSTATE

    LSTATE          shift and go to state 143


state 133

    (70) printMore -> , expression printMore .

    RPAREN          reduce using rule 70 (printMore -> , expression printMore .)


state 134

    (71) printMore -> empty empty empty .

    RPAREN          reduce using rule 71 (printMore -> empty empty empty .)


state 135

    (18) exif -> SO LPAREN expression RPAREN LSTATE statement . RSTATE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

    RSTATE          shift and go to state 144
    NEWLINE         shift and go to state 32


state 136

    (19) exif -> SO LPAREN expression RPAREN NEWLINE LSTATE . statement RSTATE
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 145
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 137

    (23) exloop -> LOOP LPAREN expression RPAREN LSTATE statement . RSTATE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

    RSTATE          shift and go to state 146
    NEWLINE         shift and go to state 32


state 138

    (24) exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE . statement RSTATE
    (16) statement -> NEWLINE . statement
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 147
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 139

    (25) exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement . RSTATE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

    RSTATE          shift and go to state 148
    NEWLINE         shift and go to state 32


state 140

    (26) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE . statement RSTATE
    (6) statement -> . statement NEWLINE statement
    (7) statement -> . statement NEWLINE statement NEWLINE
    (8) statement -> . exassign
    (9) statement -> . declare
    (10) statement -> . exprint
    (11) statement -> . exif
    (12) statement -> . exelif
    (13) statement -> . exloop
    (14) statement -> . exrepeat
    (15) statement -> . statement NEWLINE
    (16) statement -> . NEWLINE statement
    (17) statement -> . exloop NEWLINE
    (53) exassign -> . WORD EQU expression
    (54) exassign -> . arraysh EQU expression
    (59) declare -> . typeconst WORD
    (60) declare -> . typeconst WORD EQU term
    (63) declare -> . TYPE_A WORD EQU LSTATE arrayX RSTATE
    (64) declare -> . TYPE_A WORD LARRY NUM RARRY
    (65) declare -> . TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE
    (69) exprint -> . TEXT LPAREN WORD printMore RPAREN
    (18) exif -> . SO LPAREN expression RPAREN LSTATE statement RSTATE
    (19) exif -> . SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (20) exelif -> . exif exelse
    (23) exloop -> . LOOP LPAREN expression RPAREN LSTATE statement RSTATE
    (24) exloop -> . LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE
    (25) exrepeat -> . REPEAT LPAREN expression RPAREN LSTATE statement RSTATE
    (26) exrepeat -> . REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE
    (61) arraysh -> . WORD LARRY NUM RARRY
    (62) arraysh -> . WORD LARRY WORD RARRY
    (46) typeconst -> . TYPE_H
    (47) typeconst -> . TYPE_N
    (48) typeconst -> . TYPE_A
    (49) typeconst -> . TYPE_S

    NEWLINE         shift and go to state 6
    WORD            shift and go to state 43
    TYPE_A          shift and go to state 20
    TEXT            shift and go to state 22
    SO              shift and go to state 23
    LOOP            shift and go to state 24
    REPEAT          shift and go to state 25
    TYPE_H          shift and go to state 27
    TYPE_N          shift and go to state 28
    TYPE_S          shift and go to state 29

    statement                      shift and go to state 149
    exassign                       shift and go to state 7
    declare                        shift and go to state 8
    exprint                        shift and go to state 9
    exif                           shift and go to state 10
    exelif                         shift and go to state 11
    exloop                         shift and go to state 12
    exrepeat                       shift and go to state 13
    arraysh                        shift and go to state 44
    typeconst                      shift and go to state 19

state 141

    (67) arrayY -> COMMA NUM . arrayY
    (67) arrayY -> . COMMA NUM arrayY
    (68) arrayY -> . empty empty empty
    (72) empty -> .

    COMMA           shift and go to state 130
    RSTATE          reduce using rule 72 (empty -> .)

    arrayY                         shift and go to state 150
    empty                          shift and go to state 131

state 142

    (68) arrayY -> empty empty . empty
    (72) empty -> .

    RSTATE          reduce using rule 72 (empty -> .)

    empty                          shift and go to state 151

state 143

    (65) declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE . arrayX RSTATE
    (66) arrayX -> . NUM arrayY

    NUM             shift and go to state 116

    arrayX                         shift and go to state 152

state 144

    (18) exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .

    OTHERWISE       reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    NEWLINE         reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    MINUS           reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    LPAREN          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    WORD            reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_A          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    TEXT            reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    SO              reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    LOOP            reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    REPEAT          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    NUM             reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    HEX             reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_H          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_N          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_S          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    $end            reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    LSTATE          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)
    RSTATE          reduce using rule 18 (exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE .)


state 145

    (19) exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement . RSTATE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

    RSTATE          shift and go to state 153
    NEWLINE         shift and go to state 32


state 146

    (23) exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .

    NEWLINE         reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    MINUS           reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    LPAREN          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    WORD            reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_A          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    TEXT            reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    SO              reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    LOOP            reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    REPEAT          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    NUM             reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    HEX             reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_H          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_N          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_S          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    $end            reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    LSTATE          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)
    RSTATE          reduce using rule 23 (exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE .)


state 147

    (24) exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement . RSTATE
    (16) statement -> NEWLINE statement .
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

  ! shift/reduce conflict for RSTATE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    RSTATE          shift and go to state 154
    NEWLINE         shift and go to state 32

  ! RSTATE          [ reduce using rule 16 (statement -> NEWLINE statement .) ]
  ! NEWLINE         [ reduce using rule 16 (statement -> NEWLINE statement .) ]


state 148

    (25) exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .

    NEWLINE         reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    MINUS           reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    LPAREN          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    WORD            reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_A          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    TEXT            reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    SO              reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    LOOP            reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    REPEAT          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    NUM             reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    HEX             reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_H          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_N          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    TYPE_S          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    $end            reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    LSTATE          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)
    RSTATE          reduce using rule 25 (exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE .)


state 149

    (26) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement . RSTATE
    (6) statement -> statement . NEWLINE statement
    (7) statement -> statement . NEWLINE statement NEWLINE
    (15) statement -> statement . NEWLINE

    RSTATE          shift and go to state 155
    NEWLINE         shift and go to state 32


state 150

    (67) arrayY -> COMMA NUM arrayY .

    RSTATE          reduce using rule 67 (arrayY -> COMMA NUM arrayY .)


state 151

    (68) arrayY -> empty empty empty .

    RSTATE          reduce using rule 68 (arrayY -> empty empty empty .)


state 152

    (65) declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX . RSTATE

    RSTATE          shift and go to state 156


state 153

    (19) exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .

    OTHERWISE       reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    NEWLINE         reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    MINUS           reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LPAREN          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    WORD            reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_A          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TEXT            reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    SO              reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LOOP            reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    REPEAT          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    NUM             reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    HEX             reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_H          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_N          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_S          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    $end            reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LSTATE          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    RSTATE          reduce using rule 19 (exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)


state 154

    (24) exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .

    NEWLINE         reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    MINUS           reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    LPAREN          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    WORD            reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    TYPE_A          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    TEXT            reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    SO              reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    LOOP            reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    REPEAT          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    NUM             reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    HEX             reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    TYPE_H          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    TYPE_N          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    TYPE_S          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    $end            reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    LSTATE          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)
    RSTATE          reduce using rule 24 (exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE .)


state 155

    (26) exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .

    NEWLINE         reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    MINUS           reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LPAREN          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    WORD            reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_A          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TEXT            reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    SO              reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LOOP            reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    REPEAT          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    NUM             reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    HEX             reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_H          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_N          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    TYPE_S          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    $end            reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    LSTATE          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)
    RSTATE          reduce using rule 26 (exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE .)


state 156

    (65) declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .

    NEWLINE         reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    MINUS           reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    LPAREN          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    WORD            reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    TYPE_A          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    TEXT            reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    SO              reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    LOOP            reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    REPEAT          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    NUM             reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    HEX             reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    TYPE_H          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    TYPE_N          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    TYPE_S          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    $end            reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    LSTATE          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)
    RSTATE          reduce using rule 65 (declare -> TYPE_A WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MUL in state 14 resolved as shift
WARNING: shift/reduce conflict for DIV in state 14 resolved as shift
WARNING: shift/reduce conflict for MOD in state 14 resolved as shift
WARNING: shift/reduce conflict for WORD in state 20 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 32 resolved as shift
WARNING: shift/reduce conflict for WORD in state 32 resolved as shift
WARNING: shift/reduce conflict for TYPE_A in state 32 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 32 resolved as shift
WARNING: shift/reduce conflict for SO in state 32 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 32 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 32 resolved as shift
WARNING: shift/reduce conflict for TYPE_H in state 32 resolved as shift
WARNING: shift/reduce conflict for TYPE_N in state 32 resolved as shift
WARNING: shift/reduce conflict for TYPE_S in state 32 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 42 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for MOD in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUTO in state 72 resolved as shift
WARNING: shift/reduce conflict for NOEQU in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS in state 72 resolved as shift
WARNING: shift/reduce conflict for MORE in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MUL in state 73 resolved as shift
WARNING: shift/reduce conflict for DIV in state 73 resolved as shift
WARNING: shift/reduce conflict for MOD in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUTO in state 73 resolved as shift
WARNING: shift/reduce conflict for NOEQU in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS in state 73 resolved as shift
WARNING: shift/reduce conflict for MORE in state 73 resolved as shift
WARNING: shift/reduce conflict for MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 99 resolved as shift
WARNING: shift/reduce conflict for WORD in state 99 resolved as shift
WARNING: shift/reduce conflict for TYPE_A in state 99 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 99 resolved as shift
WARNING: shift/reduce conflict for SO in state 99 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 99 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 99 resolved as shift
WARNING: shift/reduce conflict for TYPE_H in state 99 resolved as shift
WARNING: shift/reduce conflict for TYPE_N in state 99 resolved as shift
WARNING: shift/reduce conflict for TYPE_S in state 99 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 114 resolved as shift
WARNING: shift/reduce conflict for RSTATE in state 147 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 77 resolved using rule (expression -> term PLUS term)
WARNING: rejected rule (expression -> term) in state 77
WARNING: reduce/reduce conflict in state 79 resolved using rule (expression -> term MINUS term)
WARNING: rejected rule (expression -> term) in state 79
WARNING: reduce/reduce conflict in state 81 resolved using rule (expression -> term MUL term)
WARNING: rejected rule (expression -> term) in state 81
WARNING: reduce/reduce conflict in state 83 resolved using rule (expression -> term DIV term)
WARNING: rejected rule (expression -> term) in state 83
WARNING: reduce/reduce conflict in state 85 resolved using rule (expression -> term MOD term)
WARNING: rejected rule (expression -> term) in state 85
WARNING: reduce/reduce conflict in state 99 resolved using rule (statement -> statement NEWLINE statement NEWLINE)
WARNING: rejected rule (statement -> statement NEWLINE) in state 99

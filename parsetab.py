
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVMODleftLESSMOREBACK COMMA DECADE DECL DIV EQU EQUTO HEX INT64 LARRY LESS LOOP LPAREN LSTATE MINUS MOD MORE MUL NEWLINE NOEQU NOTSO NUM OTHERWISE PLUS RARRY REPEAT RPAREN RSTATE SEMI SO TEXT TYPE_A TYPE_H TYPE_N TYPE_S WORDstatement : statement NEWLINE statement\n                 | statement NEWLINE statement NEWLINEstatement : exassign\n                 | declare\n                 | exprint\n                 | exif\n                 | exelif\n                 | exloop\n                 | exrepeat\n                 | statement NEWLINE\n                 | NEWLINE statement\n                 | exloop NEWLINE\n                 exif : SO LPAREN expression RPAREN LSTATE statement RSTATE\n             | SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATEexelif : exif exelseexelse : OTHERWISE LSTATE statement LSTATE OTHERWISE\n               | OTHERWISE LSTATE NEWLINE statement RSTATEexloop : LOOP LPAREN expression RPAREN LSTATE statement RSTATE\n             | LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATEexrepeat : REPEAT LPAREN expression RPAREN LSTATE statement RSTATE\n                | REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATEexpression : expression PLUS expression                  \n                  | term PLUS term\n                  | term PLUS expression\n                  | expression MINUS expression\n                  | term MINUS term\n                  | term MINUS expression\n                  | expression MUL expression\n                  | term MUL term\n                  | term MUL expression\n                  | expression DIV expression\n                  | term DIV term\n                  | term DIV expression\n                  | expression MOD expression\n                  | term MOD term\n                  | term MOD expressionterm : WORD\n           | arraysh\n           | NUM\n           | HEXtypeconst : TYPE_H\n            | TYPE_N\n            | TYPE_A\n            | TYPE_Sexpression : termexpression : MINUS expressionexpression : LPAREN expression RPARENexassign : WORD EQU expression\n                  | arraysh EQU expression\n                  expression : expression EQUTO expressionexpression : expression NOEQU expressionexpression : expression LESS expressionexpression : expression MORE expressiondeclare : DECL typeconst WORD\n               | DECL typeconst WORD EQU termarraysh : WORD LARRY NUM RARRY\n               | WORD LARRY WORD RARRYdeclare : DECL WORD EQU LSTATE arrayX RSTATEdeclare : DECL WORD LARRY NUM RARRYdeclare : DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATEarrayX : NUM arrayYarrayY : COMMA NUM arrayY\n              | empty empty emptyexprint : TEXT LPAREN WORD printMore RPARENprintMore : "," expression printMore\n                 | empty empty emptyempty :'
    
_lr_action_items = {'NEWLINE':([0,1,2,3,4,5,6,7,8,9,17,18,19,21,35,36,37,38,39,42,43,44,47,48,55,56,57,72,74,75,82,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,114,116,117,119,120,121,128,129,130,131,132,133,137,138,139,140,141,142,146,147,148,149,],[2,17,2,-3,-4,-5,-6,-7,21,-9,2,17,-15,-12,55,57,-37,-48,-45,-38,-39,-40,-49,-54,2,17,2,-46,-57,-56,115,118,17,-22,-25,-28,-31,-34,-50,-51,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,-55,-59,-64,2,131,2,-16,-17,-58,17,2,17,2,17,2,-13,17,-18,17,-20,17,-14,-19,-21,-60,]),'WORD':([0,2,12,17,22,23,24,25,27,28,29,30,31,32,33,34,36,40,41,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,80,114,116,117,129,131,133,],[10,10,26,10,37,45,37,48,-41,-42,-43,-44,51,37,37,37,10,37,37,10,10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,10,10,10,10,10,10,]),'DECL':([0,2,17,36,55,57,114,116,117,129,131,133,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'TEXT':([0,2,17,36,55,57,114,116,117,129,131,133,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'SO':([0,2,17,36,55,57,114,116,117,129,131,133,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'LOOP':([0,2,17,36,55,57,114,116,117,129,131,133,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'REPEAT':([0,2,17,36,55,57,114,116,117,129,131,133,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'$end':([1,3,4,5,6,7,8,9,17,18,19,21,35,37,38,39,42,43,44,47,48,55,72,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,119,120,121,137,139,141,146,147,148,149,],[0,-3,-4,-5,-6,-7,-8,-9,-10,-11,-15,-12,-1,-37,-48,-45,-38,-39,-40,-49,-54,-2,-46,-57,-56,-22,-25,-28,-31,-34,-50,-51,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,-55,-59,-64,-16,-17,-58,-13,-18,-20,-14,-19,-21,-60,]),'LSTATE':([3,4,5,6,7,8,9,17,18,19,20,21,35,37,38,39,42,43,44,47,48,49,55,56,72,74,75,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,115,118,119,120,121,125,137,139,141,146,147,148,149,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-15,36,-12,-1,-37,-48,-45,-38,-39,-40,-49,-54,77,-2,85,-46,-57,-56,114,116,117,-11,-22,-25,-28,-31,-34,-50,-51,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,-55,-59,-64,129,133,-16,-17,-58,136,-13,-18,-20,-14,-19,-21,-60,]),'RSTATE':([3,4,5,6,7,8,9,17,18,19,21,35,37,38,39,42,43,44,47,48,55,72,74,75,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,119,120,121,122,124,128,130,132,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-15,-12,-1,-37,-48,-45,-38,-39,-40,-49,-54,-2,-46,-57,-56,120,-22,-25,-28,-31,-34,-50,-51,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,-55,121,-67,-59,-64,-16,-17,-58,-61,-67,137,139,141,-67,-67,-13,146,-18,147,-20,148,-62,-63,149,-14,-19,-21,-60,]),'OTHERWISE':([6,85,137,146,],[20,119,-13,-14,]),'EQU':([10,11,26,48,74,75,110,],[22,24,49,76,-57,-56,125,]),'LARRY':([10,26,37,],[23,50,23,]),'TYPE_H':([12,],[27,]),'TYPE_N':([12,],[28,]),'TYPE_A':([12,],[29,]),'TYPE_S':([12,],[30,]),'LPAREN':([13,14,15,16,22,24,32,33,34,40,41,58,59,60,61,62,63,64,65,66,67,68,69,70,71,80,],[31,32,33,34,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'MINUS':([22,24,32,33,34,37,38,39,40,41,42,43,44,47,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[40,40,40,40,40,-37,59,68,40,40,-38,-39,-40,59,59,59,59,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-46,59,-57,-56,40,-22,-25,-28,-31,-34,59,59,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,59,]),'NUM':([22,23,24,32,33,34,40,41,50,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,80,123,136,],[43,46,43,43,43,43,43,43,78,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,109,43,134,109,]),'HEX':([22,24,32,33,34,40,41,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,80,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'PLUS':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,58,67,-38,-39,-40,58,58,58,58,-46,58,-57,-56,-22,-25,-28,-31,-34,58,58,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,58,]),'MUL':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,60,69,-38,-39,-40,60,60,60,60,60,60,-57,-56,60,60,-28,-31,-34,60,60,-52,-53,69,60,69,60,-29,-30,-32,-33,-35,-36,-47,60,]),'DIV':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,61,70,-38,-39,-40,61,61,61,61,61,61,-57,-56,61,61,-28,-31,-34,61,61,-52,-53,70,61,70,61,-29,-30,-32,-33,-35,-36,-47,61,]),'MOD':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,62,71,-38,-39,-40,62,62,62,62,62,62,-57,-56,62,62,-28,-31,-34,62,62,-52,-53,71,62,71,62,-29,-30,-32,-33,-35,-36,-47,62,]),'EQUTO':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,63,-45,-38,-39,-40,63,63,63,63,-46,63,-57,-56,-22,-25,-28,-31,-34,63,63,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,63,]),'NOEQU':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,64,-45,-38,-39,-40,64,64,64,64,-46,64,-57,-56,-22,-25,-28,-31,-34,64,64,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,64,]),'LESS':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,65,-45,-38,-39,-40,65,65,65,65,65,65,-57,-56,65,65,65,65,65,65,65,-52,-53,-23,65,-26,65,-29,65,-32,65,-35,65,-47,65,]),'MORE':([37,38,39,42,43,44,47,52,53,54,72,73,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,66,-45,-38,-39,-40,66,66,66,66,66,66,-57,-56,66,66,66,66,66,66,66,-52,-53,-23,66,-26,66,-29,66,-32,66,-35,66,-47,66,]),'RPAREN':([37,39,42,43,44,51,52,53,54,72,73,74,75,79,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,113,126,127,],[-37,-45,-38,-39,-40,-67,82,83,84,-46,106,-57,-56,111,-67,-22,-25,-28,-31,-34,-50,-51,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,-67,-67,-65,-66,]),',':([37,39,42,43,44,51,72,74,75,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,],[-37,-45,-38,-39,-40,80,-46,-57,-56,-22,-25,-28,-31,-34,-50,-51,-52,-53,-23,-24,-26,-27,-29,-30,-32,-33,-35,-36,-47,80,]),'RARRY':([45,46,78,],[74,75,110,]),'COMMA':([109,134,],[123,123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,2,17,36,55,57,114,116,117,129,131,133,],[1,18,35,56,35,86,128,130,132,138,140,142,]),'exassign':([0,2,17,36,55,57,114,116,117,129,131,133,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'declare':([0,2,17,36,55,57,114,116,117,129,131,133,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'exprint':([0,2,17,36,55,57,114,116,117,129,131,133,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'exif':([0,2,17,36,55,57,114,116,117,129,131,133,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'exelif':([0,2,17,36,55,57,114,116,117,129,131,133,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'exloop':([0,2,17,36,55,57,114,116,117,129,131,133,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'exrepeat':([0,2,17,36,55,57,114,116,117,129,131,133,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'arraysh':([0,2,17,22,24,32,33,34,36,40,41,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,80,114,116,117,129,131,133,],[11,11,11,42,42,42,42,42,11,42,42,11,11,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,11,11,11,11,11,11,]),'exelse':([6,],[19,]),'typeconst':([12,],[25,]),'expression':([22,24,32,33,34,40,41,58,59,60,61,62,63,64,65,66,67,68,69,70,71,80,],[38,47,52,53,54,72,73,87,88,89,90,91,92,93,94,95,97,99,101,103,105,112,]),'term':([22,24,32,33,34,40,41,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,80,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,96,98,100,102,104,107,39,]),'printMore':([51,112,],[79,126,]),'empty':([51,81,109,112,113,124,134,135,],[81,113,124,81,127,135,124,144,]),'arrayX':([77,136,],[108,145,]),'arrayY':([109,134,],[122,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement NEWLINE statement','statement',3,'p_statement_multiple','myparser.py',15),
  ('statement -> statement NEWLINE statement NEWLINE','statement',4,'p_statement_multiple','myparser.py',16),
  ('statement -> exassign','statement',1,'p_statement_simple','myparser.py',20),
  ('statement -> declare','statement',1,'p_statement_simple','myparser.py',21),
  ('statement -> exprint','statement',1,'p_statement_simple','myparser.py',22),
  ('statement -> exif','statement',1,'p_statement_simple','myparser.py',23),
  ('statement -> exelif','statement',1,'p_statement_simple','myparser.py',24),
  ('statement -> exloop','statement',1,'p_statement_simple','myparser.py',25),
  ('statement -> exrepeat','statement',1,'p_statement_simple','myparser.py',26),
  ('statement -> statement NEWLINE','statement',2,'p_statement_simple','myparser.py',27),
  ('statement -> NEWLINE statement','statement',2,'p_statement_simple','myparser.py',28),
  ('statement -> exloop NEWLINE','statement',2,'p_statement_simple','myparser.py',29),
  ('exif -> SO LPAREN expression RPAREN LSTATE statement RSTATE','exif',7,'p_exif','myparser.py',40),
  ('exif -> SO LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE','exif',8,'p_exif','myparser.py',41),
  ('exelif -> exif exelse','exelif',2,'p_exelif','myparser.py',49),
  ('exelse -> OTHERWISE LSTATE statement LSTATE OTHERWISE','exelse',5,'p_exelse','myparser.py',54),
  ('exelse -> OTHERWISE LSTATE NEWLINE statement RSTATE','exelse',5,'p_exelse','myparser.py',55),
  ('exloop -> LOOP LPAREN expression RPAREN LSTATE statement RSTATE','exloop',7,'p_exloop','myparser.py',63),
  ('exloop -> LOOP LPAREN expression RPAREN LSTATE NEWLINE statement RSTATE','exloop',8,'p_exloop','myparser.py',64),
  ('exrepeat -> REPEAT LPAREN expression RPAREN LSTATE statement RSTATE','exrepeat',7,'p_exrepeat','myparser.py',71),
  ('exrepeat -> REPEAT LPAREN expression RPAREN NEWLINE LSTATE statement RSTATE','exrepeat',8,'p_exrepeat','myparser.py',72),
  ('expression -> expression PLUS expression','expression',3,'p_expression_operators','myparser.py',80),
  ('expression -> term PLUS term','expression',3,'p_expression_operators','myparser.py',81),
  ('expression -> term PLUS expression','expression',3,'p_expression_operators','myparser.py',82),
  ('expression -> expression MINUS expression','expression',3,'p_expression_operators','myparser.py',83),
  ('expression -> term MINUS term','expression',3,'p_expression_operators','myparser.py',84),
  ('expression -> term MINUS expression','expression',3,'p_expression_operators','myparser.py',85),
  ('expression -> expression MUL expression','expression',3,'p_expression_operators','myparser.py',86),
  ('expression -> term MUL term','expression',3,'p_expression_operators','myparser.py',87),
  ('expression -> term MUL expression','expression',3,'p_expression_operators','myparser.py',88),
  ('expression -> expression DIV expression','expression',3,'p_expression_operators','myparser.py',89),
  ('expression -> term DIV term','expression',3,'p_expression_operators','myparser.py',90),
  ('expression -> term DIV expression','expression',3,'p_expression_operators','myparser.py',91),
  ('expression -> expression MOD expression','expression',3,'p_expression_operators','myparser.py',92),
  ('expression -> term MOD term','expression',3,'p_expression_operators','myparser.py',93),
  ('expression -> term MOD expression','expression',3,'p_expression_operators','myparser.py',94),
  ('term -> WORD','term',1,'p_value','myparser.py',107),
  ('term -> arraysh','term',1,'p_value','myparser.py',108),
  ('term -> NUM','term',1,'p_value','myparser.py',109),
  ('term -> HEX','term',1,'p_value','myparser.py',110),
  ('typeconst -> TYPE_H','typeconst',1,'p_value_hexdecstr','myparser.py',114),
  ('typeconst -> TYPE_N','typeconst',1,'p_value_hexdecstr','myparser.py',115),
  ('typeconst -> TYPE_A','typeconst',1,'p_value_hexdecstr','myparser.py',116),
  ('typeconst -> TYPE_S','typeconst',1,'p_value_hexdecstr','myparser.py',117),
  ('expression -> term','expression',1,'p_expression_standalone','myparser.py',122),
  ('expression -> MINUS expression','expression',2,'p_expression_negative','myparser.py',127),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','myparser.py',132),
  ('exassign -> WORD EQU expression','exassign',3,'p_expression_assign','myparser.py',136),
  ('exassign -> arraysh EQU expression','exassign',3,'p_expression_assign','myparser.py',137),
  ('expression -> expression EQUTO expression','expression',3,'p_expression_EQUTO','myparser.py',143),
  ('expression -> expression NOEQU expression','expression',3,'p_expression_NEQU','myparser.py',147),
  ('expression -> expression LESS expression','expression',3,'p_expression_LESS','myparser.py',152),
  ('expression -> expression MORE expression','expression',3,'p_expression_MORE','myparser.py',157),
  ('declare -> DECL typeconst WORD','declare',3,'p_declare_const','myparser.py',165),
  ('declare -> DECL typeconst WORD EQU term','declare',5,'p_declare_const','myparser.py',166),
  ('arraysh -> WORD LARRY NUM RARRY','arraysh',4,'p_defineexp_arrayshort','myparser.py',176),
  ('arraysh -> WORD LARRY WORD RARRY','arraysh',4,'p_defineexp_arrayshort','myparser.py',177),
  ('declare -> DECL WORD EQU LSTATE arrayX RSTATE','declare',6,'p_defineexp_arraya','myparser.py',181),
  ('declare -> DECL WORD LARRY NUM RARRY','declare',5,'p_defineexp_arrayb','myparser.py',186),
  ('declare -> DECL WORD LARRY NUM RARRY EQU LSTATE arrayX RSTATE','declare',9,'p_defineexp_arrayc','myparser.py',191),
  ('arrayX -> NUM arrayY','arrayX',2,'p_arrayX_simple','myparser.py',196),
  ('arrayY -> COMMA NUM arrayY','arrayY',3,'p_arrayY_simple','myparser.py',201),
  ('arrayY -> empty empty empty','arrayY',3,'p_arrayY_simple','myparser.py',202),
  ('exprint -> TEXT LPAREN WORD printMore RPAREN','exprint',5,'p_exprint','myparser.py',211),
  ('printMore -> , expression printMore','printMore',3,'p_print_content','myparser.py',216),
  ('printMore -> empty empty empty','printMore',3,'p_print_content','myparser.py',217),
  ('empty -> <empty>','empty',0,'p_empty','myparser.py',224),
]
